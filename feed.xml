<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Chin.Mini-Lab</title>
    <subtitle>Geo-Graph-ing</subtitle>
    <link rel="alternate" href="http://wcchin.github.io/" />
    <link rel="self" href="http://wcchin.github.io/feed.xml" type="application/atom+xml" />
    <id>http://wcchin.github.io/</id>
    <updated>2015-09-15T14:44:32Z</updated>
    
    <author>
        <name>Benny Chin</name>
        <email>wcchin.88@gmail.com</email>
        <uri>http://wcchin.github.io/</uri>
    </author>
    
    
        <entry>
            <title>Using plotly</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/09/07/using_plotly/" type="text/html" />
            <id>http://wcchin.github.io/2015/09/07/using_plotly/</id>
            <updated>2015-09-07T09:36:00Z</updated>
            
            <summary type="html">I made a &lt;a href=&#34;https://wcchin.github.io/geograph/dengue_spacetimemap/&#34; target=&#34;_blank&#34;&gt;3D scatter plot&lt;/a&gt; with &lt;a href=&#34;https://plot.ly&#34; target=&#34;_blank&#34;&gt;plotly&lt;/a&gt; yesterday, in ipython notebook (Jupyter).
The data was stored in github, including the processed point data (with centroid coordinate), and the boundary vertex of Taiwan.</summary>
            <content type="html">&lt;p&gt;I made a &lt;a href=&#34;https://wcchin.github.io/geograph/dengue_spacetimemap/&#34; target=&#34;_blank&#34;&gt;3D scatter plot&lt;/a&gt; with &lt;a href=&#34;https://plot.ly&#34; target=&#34;_blank&#34;&gt;plotly&lt;/a&gt; yesterday, in ipython notebook (Jupyter).
The data was stored in github, including the processed point data (with centroid coordinate), and the boundary vertex of Taiwan.&lt;/p&gt;

&lt;p&gt;The plot figures is at &lt;a href=&#34;https://wcchin.github.io/geograph/dengue_spacetimemap/&#34;&gt;Dengue cases at Taiwan from year 2014 &lt;/a&gt; 
or in &lt;a href=&#34;https://plot.ly/~wcchin/67/indigenous-case-imported-case-taiwan-boundary/&#34; target=&#34;_blank&#34;&gt;plotly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code is as the following:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;python&#34;&gt;import sys
reload(sys)
sys.setdefaultencoding(&amp;quot;utf-8&amp;quot;)
import plotly.plotly as py
from plotly.graph_objs import *
import pandas as pd
import datetime

df = pd.read_csv(&amp;#x27;https:&amp;#x2F;&amp;#x2F;raw.githubusercontent.com&amp;#x2F;wcchin&amp;#x2F;gdata&amp;#x2F;master&amp;#x2F;Dengue_ALL_4_1415.csv&amp;#x27;)
df_bound = pd.read_csv(&amp;#x27;https:&amp;#x2F;&amp;#x2F;raw.githubusercontent.com&amp;#x2F;wcchin&amp;#x2F;gdata&amp;#x2F;master&amp;#x2F;taiwan_bound_84_vertices2.csv&amp;#x27;)
yy = df[&amp;#x27;lat&amp;#x27;].tolist()
xx = df[&amp;#x27;lon&amp;#x27;].tolist()
zz = df[&amp;#x27;day&amp;#x27;].tolist()
vilname = df[&amp;#x27;fullname&amp;#x27;].tolist()
importcheck = df[&amp;#x27;importcase&amp;#x27;].tolist()

datelist_imp = []
latlist_imp = []
lonlist_imp = []
vilname_imp = []

datelist_ind = []
latlist_ind = []
lonlist_ind = []
vilname_ind = []

year = df[&amp;#x27;year&amp;#x27;].tolist()
month = df[&amp;#x27;month&amp;#x27;].tolist()
day = df[&amp;#x27;day&amp;#x27;].tolist()
for i in range(len(year)):
    thisyear = year[i]
    thismonth = month[i]
    thisday = day[i]
    thisdate = datetime.date(thisyear, thismonth, thisday)
    thisvilname=vilname[i].decode(&amp;#x27;big5&amp;#x27;)
    #print importcheck[i]
    if importcheck[i]==True:
        datelist_imp.append(thisdate)
        latlist_imp.append(yy[i])
        lonlist_imp.append(xx[i])
        vilname_imp.append(thisvilname)
    else:
        datelist_ind.append(thisdate)
        latlist_ind.append(yy[i])
        lonlist_ind.append(xx[i])
        vilname_ind.append(thisvilname)
#print len(datelist_ind)
#print len(datelist_imp)

bound_x = df_bound[&amp;#x27;lon&amp;#x27;].tolist()
bound_y = df_bound[&amp;#x27;lat&amp;#x27;].tolist()
zero = [datetime.date(2014,1,1)]
bound_z = zero*(len(bound_x))

trace1 = Scatter3d(
    x=lonlist_ind, 
    y=latlist_ind, 
    z=datelist_ind, 
    text=vilname_ind,
    mode=&amp;#x27;markers&amp;#x27;,
    name=&amp;#x27;indigenous case&amp;#x27;,
    marker=Marker(
        size=2,
        line=Line(
            color=&amp;#x27;rgb(0, 0, 0)&amp;#x27;,
            width=0.5
        ),
        opacity=0.8
    )
)

trace2 = Scatter3d(
    x=lonlist_imp, 
    y=latlist_imp, 
    z=datelist_imp, 
    text=vilname_imp,
    mode=&amp;#x27;markers&amp;#x27;,
    name=&amp;#x27;imported case&amp;#x27;,
    marker=Marker(
        color=&amp;#x27;rgb(255, 65, 54)&amp;#x27;,
        size=3,
        symbol=&amp;#x27;circle&amp;#x27;,
        line=Line(
            color=&amp;#x27;rgb(255, 65, 54)&amp;#x27;,
            width=1
        ),
        opacity=0.6
    )
)

tracebound = Scatter3d(
    x= bound_x,
    y= bound_y, 
    z= bound_z, 
    mode=&amp;#x27;lines&amp;#x27;,
    name=&amp;#x27;taiwan boundary&amp;#x27;,
    marker=Marker(
        color=&amp;#x27;#1f77b4&amp;#x27;,
        size=12,
        symbol=&amp;#x27;circle&amp;#x27;,
        line=Line(
            color=&amp;#x27;rgb(0,0,0)&amp;#x27;,
            width=0
        )
    ),
    line=Line(
        color=&amp;#x27;#1f77b4&amp;#x27;,
        width=1
    )
)
       
data = Data([trace1, trace2, tracebound])
layout = Layout(
    margin=Margin(
        l=0,
        r=0,
        b=0,
        t=0
    ),
    legend=Legend(
        y=0.5,
        traceorder=&amp;#x27;reversed&amp;#x27;,
        font=Font(
            size=16
        ),
        yref=&amp;#x27;paper&amp;#x27;
    ),
    
    scene=Scene(
        xaxis=XAxis(title=&amp;#x27;longitude&amp;#x27;),
        yaxis=YAxis(title=&amp;#x27;latitude&amp;#x27;),
        zaxis=ZAxis(title=&amp;#x27;date&amp;#x27;)
    )
)
fig = Figure(data=data, layout=layout)
plot_url = py.plot(fig, filename=&amp;#x27;Taiwan dengue cases (indigenous or imported) space-time map&amp;#x27;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ps: the python environment has to complete the connection api key configuration before using the code above. &lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Using nbconvert to convert ipynb to slides in html</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/08/27/using_nbconverttoslides/" type="text/html" />
            <id>http://wcchin.github.io/2015/08/27/using_nbconverttoslides/</id>
            <updated>2015-08-27T12:06:00Z</updated>
            
            <summary type="html">This is a note on using nbconvert to make slides from ipynb to html, with markdown and codes using jupyter.
jupyter, nbconvert have to be installed in the computer.</summary>
            <content type="html">&lt;p&gt;This is a note on using nbconvert to make slides from ipynb to html, with markdown and codes using jupyter.
jupyter, nbconvert have to be installed in the computer.&lt;/p&gt;
&lt;h2&gt;Prepare the file&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;open a jupyter from terminal:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ pyenv shell miniconda-3.9.1
$ ipython notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;create a file (.ipynb), maybe a python2 file or R or something else which code you are going to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the text page, change the &lt;code&gt;Code&lt;/code&gt; to &lt;code&gt;Markdown&lt;/code&gt;, choose &lt;code&gt;Slideshow&lt;/code&gt; in Cell Toolbar.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select one of the item in the Slide Type in the heading of each cell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type in markdown syntax, use tex syntax to type equation (MathJax is supported).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click save, or wait until autosave.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Convert to slides:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In terminal, change directory to where the .ipynb is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type this in terminal, suppose the .ipynb file&amp;rsquo;s name is &lt;code&gt;filename&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ jupyter nbconvert --to slides filename.ipynb --reveal-prefix &amp;quot;http:&amp;#x2F;&amp;#x2F;cdn.jsdelivr.net&amp;#x2F;reveal.js&amp;#x2F;2.5.0&amp;quot;
$ ## or
$ jupyter nbconvert --to slides filename.ipynb --reveal-prefix &amp;quot;http:&amp;#x2F;&amp;#x2F;cdn.jsdelivr.net&amp;#x2F;reveal.js&amp;#x2F;2.5.0&amp;quot; --post serve
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;a file name &lt;code&gt;filename.slides.html&lt;/code&gt; will be created, open it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to change the theme from default to other provided theme, in address bar, add &lt;code&gt;?theme=sky&lt;/code&gt; after the &lt;code&gt;filename.slides.html&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;other theme options: simple (default), sky, beige, solarized, serif, night, moon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to change the default transition to other provided way, same as changing the theme, add &lt;code&gt;?transition=convex&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;other transition options: none, fade, slide, convex, concave, zoom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the themes still not meet your ideal slides, add a file in the same directory name &lt;code&gt;custom.css&lt;/code&gt;, use this to alter the looks of the page, font style etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Taada&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width=&#34;800&#34; height=&#34;600&#34; src=&#34;http://wcchin.github.io/assets/ipyslides/testing_slides.slides.html?theme=sky?transition=convex&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</content>
        </entry>
    
        <entry>
            <title>Adding math formula</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/08/21/Including_mathjax/" type="text/html" />
            <id>http://wcchin.github.io/2015/08/21/Including_mathjax/</id>
            <updated>2015-08-21T16:00:00Z</updated>
            
            <summary type="html">Testing &lt;a href=&#34;https://www.mathjax.org&#34; target=&#34;_blank&#34;&gt;MathJax&lt;/a&gt;</summary>
            <content type="html">&lt;p&gt;Testing &lt;a href=&#34;https://www.mathjax.org&#34; target=&#34;_blank&#34;&gt;MathJax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;$$ GPR_{t}A = W_{AB} \times \frac{GPR_{t-1}B}{out_B} $$&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;installing&amp;rdquo; steps is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;include the CDN in &lt;head&gt; &amp;hellip; &lt;/head&gt;, in the case of mynt&amp;rsquo;s quick start template, this could be added in the page.header.html file.&lt;/li&gt;
&lt;li&gt;type the formula in tex&amp;rsquo;s syntax, using the double $ as the entering and exiting characters, so that the formula is between double $ pair. &lt;/li&gt;
&lt;li&gt;note that in default setting, the inline math mode is not supported, namely the single $ pair. To use this, some code is needed to be added to overwrite this setting. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;note: I tried to install the mathjax js in asset, and it is simple and worked. But, the generating time becomes longer, like a few seconds, maybe is because of the files that come with the js are quite large. So, I changed back to use the officially provided CDN. &lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Adding commenting system</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/08/20/Added_disqus/" type="text/html" />
            <id>http://wcchin.github.io/2015/08/20/Added_disqus/</id>
            <updated>2015-08-20T16:00:00Z</updated>
            
            <summary type="html">In order to get feedbacks from friends, I added the Disqus commenting system in this site.</summary>
            <content type="html">&lt;p&gt;In order to get feedbacks from friends, I added the Disqus commenting system in this site.&lt;/p&gt;

&lt;p&gt;Adding a Disqus comment system in a static website is not difficult:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sign-up on &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34;&gt;Disqus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Go to Settings, Admin.&lt;/li&gt;
&lt;li&gt;Add new site and setup.&lt;/li&gt;
&lt;li&gt;Go to Install, Universal Code, and copy the codes to the template/layout html file.&lt;/li&gt;
&lt;li&gt;Regenerate the website, and push to the hosting server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thats all.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>First post of the mini-lab</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/08/03/First_post/" type="text/html" />
            <id>http://wcchin.github.io/2015/08/03/First_post/</id>
            <updated>2015-08-03T16:00:00Z</updated>
            
            
            <content type="html">&lt;h5&gt;Welcome to &lt;a href=&#34;https://wcchin.github.io&#34; target=&#34;_blank&#34;&gt;Benny.mini-lab&lt;/a&gt;.&lt;/h5&gt;
&lt;p&gt;This is a place for storing what has come to my mind, and what I&amp;rsquo;ve done&lt;/p&gt;

&lt;p&gt;I created this website using the &lt;a href=&#34;http://mynt.uhnomoli.com&#34; target=&#34;_blank&#34;&gt;mynt&lt;/a&gt;, a static site generator using python and jinja.&lt;/p&gt;

&lt;p&gt;The style of the website is inspired by the &lt;a href=&#34;http://leafletjs.com&#34; target=&#34;_blank&#34;&gt;leafletjs&lt;/a&gt; and &lt;a href=&#34;http://getskeleton.com&#34; target=&#34;_blank&#34;&gt;skeleton&lt;/a&gt; website. These websites showed the beauty and power of simplicity. 
This website&amp;rsquo;s template was modified from the mynt&amp;rsquo;s &lt;em&gt;init&lt;/em&gt; site with the skeleton css.&lt;/p&gt;

&lt;p&gt;Currently, the &lt;a href=&#34;http://wcchin.github.io/about/&#34;&gt;about&lt;/a&gt; page was done. Two published paper that I have a little contribution were added in the &lt;a href=&#34;http://wcchin.github.io/findings/&#34;&gt;findings&lt;/a&gt; page.
The other pages will be fill-in while I am working.&lt;/p&gt;

&lt;p&gt;Thanks for visiting.&lt;/p&gt;
</content>
        </entry>
    
</feed>
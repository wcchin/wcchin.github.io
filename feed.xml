<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Chin.Mini-Lab</title>
    <subtitle>Geo-Graph-ing</subtitle>
    <link rel="alternate" href="http://wcchin.github.io/" />
    <link rel="self" href="http://wcchin.github.io/feed.xml" type="application/atom+xml" />
    <id>http://wcchin.github.io/</id>
    <updated>2016-06-12T02:02:40Z</updated>
    
    <author>
        <name>Benny Chin</name>
        <email>wcchin.88@gmail.com</email>
        <uri>http://wcchin.github.io/</uri>
    </author>
    
    
        <entry>
            <title>the nearest neighbours in two dimensions space</title>
            <link rel="alternate" href="http://wcchin.github.io/2016/04/22/about_kdtree_in_work/" type="text/html" />
            <id>http://wcchin.github.io/2016/04/22/about_kdtree_in_work/</id>
            <updated>2016-04-22T00:52:00Z</updated>
            
            
            <content type="html">&lt;h2&gt;nearest neighbours&lt;/h2&gt;
&lt;p&gt;Which points are the nearest neighbours, or top N nearest neighbours, are the frequently used procedures in point data analysis. 
Sometimes, we might need to find the neighbours in-radius of some distance. &lt;/p&gt;

&lt;p&gt;K-d tree is one of the data structure for searching the points that is closer to a target point that is in k-dimensions. 
E.g. for 2-d points, each point has a x coordinate and a y coordinate, it is called 2-d tree. 
In a 2-d tree, starting from the root, is the first dimension (let say x-dimension), then the second level would be for the second dimension (y-dimension).
The idea is to divide the points into two groups in each level, smaller item go to the left, bigger item go to the right&amp;hellip;&lt;/p&gt;

&lt;p&gt;So, the kd-tree helps to reduce the k-dimension nearest neighbours problem into a simpler problem (in terms of complexity), by using the divide-and-conquer trick.&lt;/p&gt;
&lt;h2&gt;working in python&lt;/h2&gt;
&lt;p&gt;In this example, base points are the points in the ground, let says, the shops;
source points are the points that is going to search for the nearest destinations (base points), let says, the location of the people. 
The aim is to locate the shops that is nearby to each person. 
So, it would be for each person, search one time.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;python&#34;&gt;from scipy import spatial

xlist = [5,4,3,8,7,6] # x coordinates of base points...
ylist = [1,0,3,8,5,3] # y coordinates of base points...

px = [2.4, 4.8, 1.2] # x coordinates for the three people
py = [1.1, 6.3, 9.8] $ ycoordinates for the three people

data = zip(xlist,ylist)
pts = zip(px,py)
tree = spatial.KDTree(data)

nn_radius = 3 # the nearby radius for searching
nlist = tree.query_ball_point(x=pts, r=nn_radius) # If x is a single point, returns a list of the indices of the neighbors of x. If x is an array of points, returns an object array of shape tuple containing lists of neighbors.
# in this case, it will return an array of list, which represent the index of the nearby neighbours in the data list. 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;besides query_ball_point, there are other methods (from &lt;a href=&#34;http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree&#34;&gt;scipy&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;python&#34;&gt;count_neighbors(other, r[, p])  #Count how many nearby pairs can be formed.
query(x[, k, eps, p, distance_upper_bound]) #Query the kd-tree for nearest neighbors
query_ball_tree(other, r[, p, eps]) #Find all pairs of points whose distance is at most r
query_pairs(r[, p, eps])    #Find all pairs of points within a distance.
sparse_distance_matrix(other, max_distance) #Compute a sparse distance matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree&#34;&gt;more details from scipy docs&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>working with heapq in python</title>
            <link rel="alternate" href="http://wcchin.github.io/2016/04/22/about_heapq_in_python/" type="text/html" />
            <id>http://wcchin.github.io/2016/04/22/about_heapq_in_python/</id>
            <updated>2016-04-22T00:50:00Z</updated>
            
            
            <content type="html">&lt;h2&gt;simple notes on heapq&lt;/h2&gt;
&lt;p&gt;heapq is a data structure to implement (work with) priority queue.&lt;/p&gt;

&lt;p&gt;Let says, there is an array of several numbers. Sometimes, we need to get the top 3 largest number in the array.
One way of getting the max or min result, is to scan all of the items (numbers) in the array, which means starting with the first number, then compare it to the second, change the number to the second one if the second is bigger, then continue until the last number. 
Then, do this again with the rest of the numbers to get the second largest, and same procedure again for the third. That means, the complexity would be approximately m x N, that m is the top m largest or smallest, and N is the number of item in the array. &lt;/p&gt;

&lt;p&gt;The other way is perform a sorting procedure to the array, then choose the top 3 number at the front or at the back. This solution&amp;rsquo;s complexity would depend on the sorting algorithm. &lt;/p&gt;

&lt;p&gt;Priority queue (PQ) is like sorting, that do not sort the data in an array. But always pop out the smallest or largest item from the array.&lt;/p&gt;

&lt;p&gt;We can use heapq to implement PQ. heapq construct a heap tree instead of sorting. There are two type of heap tree: min heap and max heap. 
A min heap is a binary tree that the parent is always smaller (or equal) than the children. A max heap is the opposite, that parrent is always larger (or equal) than children. 
So, with a min heap or max heap, it can always pop out the smallest or biggest item (respectively) from the array. &lt;/p&gt;
&lt;h2&gt;heapq in python&lt;/h2&gt;&lt;pre&gt;&lt;code data-lang=&#34;python&#34;&gt;    import heapq
    alist = [3,7,4,1,9,5,8,2,3,9,5,7]  #first, create a list that populated with items

    heapq.heapify(alist) #heapify the list, that create a heap tree, inplace
    aheap=alist

    heapsort(alist) # this will create a sorted list of the list

    heapq.heappush(aheap, 10) # add the item 10 into the heap tree

    heapq.heappop(aheap) # pop out and return the smallest item from the heap tree

    aheap[0] # access the smallest number without pop it out
     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/heapq.html&#34;&gt;more details from python docs&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Using tiddler - lightbulb page changed</title>
            <link rel="alternate" href="http://wcchin.github.io/2016/01/30/renew_lightbulb_page/" type="text/html" />
            <id>http://wcchin.github.io/2016/01/30/renew_lightbulb_page/</id>
            <updated>2016-01-30T05:31:00Z</updated>
            
            <summary type="html">The note page was changed to tiddler wiki based.</summary>
            <content type="html">&lt;p&gt;The note page was changed to tiddler wiki based.&lt;/p&gt;

&lt;p&gt;I am using tiddlywiki-desktop now, to write the tiddlers(posts) and journals(logs) with it, directly in the mynt staticsite folders.&lt;/p&gt;

&lt;p&gt;The tiddlywiki is now locate in the asset folders, which can be linked to the note page via iframe.&lt;/p&gt;

&lt;p&gt;Plus, the tiddlers can be open in a new tab, to show the tiddler and open the tiddlywiki as an independent (static but flowing/interactive) pages.&lt;/p&gt;

&lt;p&gt;Tiddlywiki, a single-page-application, is a wiki style note-taking system. It is designed to be used as a one-file app, that open in the browser(html+js).
Tiddlers are linked to the related tiddlers, just the same as the &amp;ldquo;wiki&amp;rdquo; system. (It is a wiki system)&lt;/p&gt;

&lt;p&gt;I am planning on migrating my tiddlyspace tiddlers into this tiddly, since they seem to be closed in the end of 2016.&lt;/p&gt;

&lt;p&gt;visit &lt;a href=&#34;http://wcchin.github.io/lightbulb/&#34;&gt;Lightbulb&lt;/a&gt; .&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Pushing items to gh-pages</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/10/31/sync_ghpages/" type="text/html" />
            <id>http://wcchin.github.io/2015/10/31/sync_ghpages/</id>
            <updated>2015-10-31T23:06:00Z</updated>
            
            <summary type="html">I am new to the &amp;lsquo;git&amp;rsquo; world (a github noob). I use github as a space to store some things that I want to share with public. This website is stored in the gh-pages master branch. I have another repository that is also used as gh-pages, but not as the master branch. So I am taking this note to remind myself how to sync the branchs.</summary>
            <content type="html">&lt;p&gt;I am new to the &amp;lsquo;git&amp;rsquo; world (a github noob). I use github as a space to store some things that I want to share with public. This website is stored in the gh-pages master branch. I have another repository that is also used as gh-pages, but not as the master branch. So I am taking this note to remind myself how to sync the branchs.&lt;/p&gt;

&lt;p&gt;The following codes would push things from local to the master branch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add --all
git commit -m &amp;#x27;the message about what have been changed&amp;#x27;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the master branch is the gh-pages branch, then this is done.&lt;br&gt;
The following codes would sync the gh-pages branch with the master:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout gh-pages
git rebase master
git push origin gh-pages
git checkout master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, the gh-pages would be online to the webpage:&lt;br&gt;
&lt;a href=&#34;https://username.github.io/repositoryname/filename.html&#34;&gt;https://username.github.io/repositoryname/filename.html&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Using mynt - a static site generator</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/10/31/using_mynt/" type="text/html" />
            <id>http://wcchin.github.io/2015/10/31/using_mynt/</id>
            <updated>2015-10-31T02:02:00Z</updated>
            
            <summary type="html">This website is generated by using mynt &amp;ndash; a static site generator writen in python. Mynt will convert markdown text file to html by using the corresponding layout. &lt;a href=&#34;http://mynt.uhnomoli.com/&#34;&gt;Mynt&amp;rsquo;s website&lt;/a&gt;.</summary>
            <content type="html">&lt;p&gt;This website is generated by using mynt &amp;ndash; a static site generator writen in python. Mynt will convert markdown text file to html by using the corresponding layout. &lt;a href=&#34;http://mynt.uhnomoli.com/&#34;&gt;Mynt&amp;rsquo;s website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Mynt is a python2 package, so python2 should be installed in the computer before installing and using mynt. (I am not sure if it works with python3.)&lt;/p&gt;

&lt;p&gt;To install mynt, type this in command line:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install mynt
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Initialize a new project/website&lt;/h2&gt;
&lt;p&gt;To start a new website at a local directory &lt;code&gt;~/project&lt;/code&gt; with the name &lt;code&gt;site-name&lt;/code&gt;, in command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mynt init ~&amp;#x2F;project&amp;#x2F;site-name&amp;#x2F;
## or force remove the existing project before create new project
mynt init -f ~&amp;#x2F;project&amp;#x2F;site-name&amp;#x2F;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Website directory structure&lt;/h3&gt;
&lt;p&gt;Mynt will create the following directories and files in the &lt;code&gt;site-name&lt;/code&gt; directory after the initialize:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;site-name
│ config.yml
│ feed.xml
│ index.html
│
├───archives
│     index.html
├───_assets
│     ├───css
│     │ │ pygments.css
│     │ │ screen.css
│     │ └───_sass
│     │         _base.sass
│     │         config.rb
│     │         screen.sass
│     ├───images
│     │     bg.png
│     │     favicon.ico
│     │     sbg.png
│     └───js
│         │ mynt.min.js
│         └───_src
│                 mynt.js
├───_posts
│     2011-12-04-It-works.md
└───_templates
│     archive.html
│     layout.html
│     page.header.html
│     post.html
│     tag.html
│
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;First thing to do, is to modify the &lt;code&gt;config.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: your title
author: your name
base_url: &amp;#x2F; # this should be change (if needed) according to the website configuration.
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Writing blog posts&lt;/h2&gt;
&lt;p&gt;Posts should be place under the &lt;code&gt;_posts&lt;/code&gt; directory. There is a demo file come with the &lt;code&gt;init&lt;/code&gt;. The demo file&amp;rsquo;s name included the date when it is written (2011-12-04), which format should be followed while creating new post file (.md), to tell mynt when the post is written, so mynt would know how to sort the posts. The following part of the filename will be a part of the filename for the generated html files, which means it will appear at the address bar while people are looking at it.&lt;/p&gt;

&lt;p&gt;Create a new file with file name like &lt;code&gt;2015-10-31-some-name.md&lt;/code&gt;. The header and post content of the file should looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: hey you
layout: post.html
tags: [testing]
---

## a sectiontitle
post content goes here. 

### a subsection title
blah blah blah...
**Use markdown here**.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the header of the .md file:&lt;br&gt;
- The title &lt;code&gt;hey you&lt;/code&gt; will be the title of the post, and also the title that will appear at the index page.
- the layout &lt;code&gt;post.html&lt;/code&gt;, is telling the mynt which layout file in &lt;code&gt;_templates&lt;/code&gt; to use, for rendering this post.
- the tags of the post.&lt;/p&gt;

&lt;p&gt;The following things after the three dashes, are the content part of the post. Use markdown syntax to write the content. And maybe some html tags in the post if needed.&lt;/p&gt;
&lt;h2&gt;Container&lt;/h2&gt;
&lt;p&gt;Sometimes, blog post is not the only type of post we want to write. For example in this website, I separated the posts into 5 types according to the topic (geograph, lightbulb&amp;hellip;). This is the function of container. To add a new container (let say &lt;code&gt;funbox&lt;/code&gt;) for the website, the config.yml file should add the following lines at the bottom of the files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;containers:
    funbox:
        url: &amp;#x2F;funbox&amp;#x2F;&amp;lt;slug&amp;gt;&amp;#x2F;
        tag_layout: funbox.tag.html
        tags_url: &amp;#x2F;funbox&amp;#x2F;tag&amp;#x2F;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that &lt;code&gt;funbox.tag.html&lt;/code&gt; file should also be added in the &lt;code&gt;_templates&lt;/code&gt; directory. (you could just copy and paste the &lt;code&gt;tag.html&lt;/code&gt; and rename it)
Then, add the following directories (beside &lt;code&gt;_posts&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;site-name
├───_containers
│ └───funbox
│         2015-10-31-a_first_file.md
├───_templates
│     funboxpost.html
│     funbox.tag.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The format of the post .md file is same as the blog post files, which probably will use the &lt;code&gt;funboxpost.html&lt;/code&gt; as the layout file. &lt;/p&gt;
&lt;h2&gt;Layout templating and sytling&lt;/h2&gt;
&lt;p&gt;Mynt use the jinja2 templating engine. So, the layout files should be written or modified according to jinja2 style templating syntax. &lt;/p&gt;

&lt;p&gt;The styles &amp;ndash; the css and js files, should be place in the &lt;code&gt;_assets/css&lt;/code&gt; and &lt;code&gt;_assets/js&lt;/code&gt;. To get them, let say the &lt;code&gt;_assets/css/skeleton.css&lt;/code&gt;, use:
&lt;code&gt;
/assets/css/skeleton.css
&lt;/code&gt;
&lt;em&gt;The template of this website is modified based on the initial template file, with the &lt;a href=&#34;http://getskeleton.com/&#34;&gt;skeleton&lt;/a&gt; sample file.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Generating website:&lt;/h2&gt;
&lt;p&gt;To generate the website to a directory &lt;code&gt;~/output/target&lt;/code&gt; (&lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;project&lt;/code&gt; directory first, then):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd project

mynt gen site-name output&amp;#x2F;target
## or, if the output&amp;#x2F;target is already exist, force overwriting it:
mynt gen -f site-name output&amp;#x2F;target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated html files and folders will appear under the &lt;code&gt;output/target&lt;/code&gt; directory, which can be uploaded to the hosting space like gh-pages.&lt;/p&gt;
&lt;h2&gt;Preview the website/post before publishing&lt;/h2&gt;
&lt;p&gt;Mynt come with a simple function (debug mode) for previewing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mynt serve output&amp;#x2F;target
## or, to change the preview port
mynt serve output&amp;#x2F;target -p 8001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, open the web-browser, and go to the site &lt;code&gt;http://localhost:8001&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Then, possibly, you might need to modify the files, and then &lt;code&gt;mynt gen -f xxx yyy&lt;/code&gt;, then &lt;code&gt;mynt serve yyy&lt;/code&gt; again, until the website is ready. &lt;/p&gt;
&lt;h2&gt;Publishing website&lt;/h2&gt;
&lt;p&gt;Upload all of the files in the &lt;code&gt;output/target&lt;/code&gt; directory to the hosting space. If you want to upload to a github-pages, then prepare the gh-pages as the &lt;a href=&#34;https://pages.github.com/&#34;&gt;github pages&lt;/a&gt; shows, then push the files to the master/gh-pages branch. There is some notes in &lt;a href=&#34;http://wcchin.github.io/2015/10/31/sync_ghpages/&#34;&gt;Pushing items to gh-pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tadaa&amp;hellip;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Article published</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/10/06/published/" type="text/html" />
            <id>http://wcchin.github.io/2015/10/06/published/</id>
            <updated>2015-10-06T11:20:00Z</updated>
            
            <summary type="html">Hooray~ This is an exciting news. </summary>
            <content type="html">&lt;p&gt;Hooray~ This is an exciting news. &lt;/p&gt;

&lt;p&gt;My first article (me as the first author) has been published yesterday. It is rewritten from my master thesis. 
The idea came to my mind in the begining of the year 2012. Most of the development of the algorithms were done within the semester. 
Then I tried to test the algorithm in more ways, and finally all tryings were not end well. 
In april 2013, the algorithms were first proposed in an international conference in L.A.. Then I graduated in the following June/July. 
After that, the formal research on these algorithms were stop, and some other things keep comming up. 
Some further experiments were done. The codes were rewritten in matlab, then in python. I also made a GUI for the algorithms in Python. 
Although most of the testings did not give good results that worth noting, but, the understanding on the algorithms has became more clear. &lt;/p&gt;

&lt;p&gt;The article was submitted to the PLoSONE in the may 2015. After several times of revising, it was accepted in september after I came back from the FOSS4G conference at Seoul.  &lt;/p&gt;

&lt;p&gt;The article is about developing two algorithms for analyzing geospatial network, to see where people or moving agents would be gathering in the connected geographical space. 
The algorithms were modified from the PageRank algorithm, in the similar way as the Weighted PageRank did. Two key elements were added, the geographical distance between nodes, and the attractiveness of each node. &lt;/p&gt;

&lt;p&gt;Two &amp;ldquo;experiments&amp;rdquo; were conducted. One of them is a national-scale, inter-cities network. And the other is a series of city-scale, within-city networks. &lt;/p&gt;

&lt;p&gt;The abstract of the article is shown at &lt;a href=&#34;https://wcchin.github.io/findings/plosone_1010/&#34;&gt;Mini-lab/Findings&lt;/a&gt;. 
The article could be accessed from the &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0139509&#34; target=&#34;_blank&#34;&gt;Link to open access&lt;/a&gt;. &lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Using plotly</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/09/07/using_plotly/" type="text/html" />
            <id>http://wcchin.github.io/2015/09/07/using_plotly/</id>
            <updated>2015-09-07T09:36:00Z</updated>
            
            <summary type="html">I made a &lt;a href=&#34;https://wcchin.github.io/geograph/dengue_spacetimemap/&#34; target=&#34;_blank&#34;&gt;3D scatter plot&lt;/a&gt; with &lt;a href=&#34;https://plot.ly&#34; target=&#34;_blank&#34;&gt;plotly&lt;/a&gt; yesterday, in ipython notebook (Jupyter).
The data was stored in github, including the processed point data (with centroid coordinate), and the boundary vertex of Taiwan.</summary>
            <content type="html">&lt;p&gt;I made a &lt;a href=&#34;https://wcchin.github.io/geograph/dengue_spacetimemap/&#34; target=&#34;_blank&#34;&gt;3D scatter plot&lt;/a&gt; with &lt;a href=&#34;https://plot.ly&#34; target=&#34;_blank&#34;&gt;plotly&lt;/a&gt; yesterday, in ipython notebook (Jupyter).
The data was stored in github, including the processed point data (with centroid coordinate), and the boundary vertex of Taiwan.&lt;/p&gt;

&lt;p&gt;The plot figures is at &lt;a href=&#34;https://wcchin.github.io/geograph/dengue_spacetimemap/&#34;&gt;Dengue cases at Taiwan from year 2014 &lt;/a&gt; 
or in &lt;a href=&#34;https://plot.ly/~wcchin/67/indigenous-case-imported-case-taiwan-boundary/&#34; target=&#34;_blank&#34;&gt;plotly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code is as the following:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;python&#34;&gt;import sys
reload(sys)
sys.setdefaultencoding(&amp;quot;utf-8&amp;quot;)
import plotly.plotly as py
from plotly.graph_objs import *
import pandas as pd
import datetime

df = pd.read_csv(&amp;#x27;https:&amp;#x2F;&amp;#x2F;raw.githubusercontent.com&amp;#x2F;wcchin&amp;#x2F;gdata&amp;#x2F;master&amp;#x2F;Dengue_ALL_4_1415.csv&amp;#x27;)
df_bound = pd.read_csv(&amp;#x27;https:&amp;#x2F;&amp;#x2F;raw.githubusercontent.com&amp;#x2F;wcchin&amp;#x2F;gdata&amp;#x2F;master&amp;#x2F;taiwan_bound_84_vertices2.csv&amp;#x27;)
yy = df[&amp;#x27;lat&amp;#x27;].tolist()
xx = df[&amp;#x27;lon&amp;#x27;].tolist()
zz = df[&amp;#x27;day&amp;#x27;].tolist()
vilname = df[&amp;#x27;fullname&amp;#x27;].tolist()
importcheck = df[&amp;#x27;importcase&amp;#x27;].tolist()

datelist_imp = []
latlist_imp = []
lonlist_imp = []
vilname_imp = []

datelist_ind = []
latlist_ind = []
lonlist_ind = []
vilname_ind = []

year = df[&amp;#x27;year&amp;#x27;].tolist()
month = df[&amp;#x27;month&amp;#x27;].tolist()
day = df[&amp;#x27;day&amp;#x27;].tolist()
for i in range(len(year)):
    thisyear = year[i]
    thismonth = month[i]
    thisday = day[i]
    thisdate = datetime.date(thisyear, thismonth, thisday)
    thisvilname=vilname[i].decode(&amp;#x27;big5&amp;#x27;)
    #print importcheck[i]
    if importcheck[i]==True:
        datelist_imp.append(thisdate)
        latlist_imp.append(yy[i])
        lonlist_imp.append(xx[i])
        vilname_imp.append(thisvilname)
    else:
        datelist_ind.append(thisdate)
        latlist_ind.append(yy[i])
        lonlist_ind.append(xx[i])
        vilname_ind.append(thisvilname)
#print len(datelist_ind)
#print len(datelist_imp)

bound_x = df_bound[&amp;#x27;lon&amp;#x27;].tolist()
bound_y = df_bound[&amp;#x27;lat&amp;#x27;].tolist()
zero = [datetime.date(2014,1,1)]
bound_z = zero*(len(bound_x))

trace1 = Scatter3d(
    x=lonlist_ind, 
    y=latlist_ind, 
    z=datelist_ind, 
    text=vilname_ind,
    mode=&amp;#x27;markers&amp;#x27;,
    name=&amp;#x27;indigenous case&amp;#x27;,
    marker=Marker(
        size=2,
        line=Line(
            color=&amp;#x27;rgb(0, 0, 0)&amp;#x27;,
            width=0.5
        ),
        opacity=0.8
    )
)

trace2 = Scatter3d(
    x=lonlist_imp, 
    y=latlist_imp, 
    z=datelist_imp, 
    text=vilname_imp,
    mode=&amp;#x27;markers&amp;#x27;,
    name=&amp;#x27;imported case&amp;#x27;,
    marker=Marker(
        color=&amp;#x27;rgb(255, 65, 54)&amp;#x27;,
        size=3,
        symbol=&amp;#x27;circle&amp;#x27;,
        line=Line(
            color=&amp;#x27;rgb(255, 65, 54)&amp;#x27;,
            width=1
        ),
        opacity=0.6
    )
)

tracebound = Scatter3d(
    x= bound_x,
    y= bound_y, 
    z= bound_z, 
    mode=&amp;#x27;lines&amp;#x27;,
    name=&amp;#x27;taiwan boundary&amp;#x27;,
    marker=Marker(
        color=&amp;#x27;#1f77b4&amp;#x27;,
        size=12,
        symbol=&amp;#x27;circle&amp;#x27;,
        line=Line(
            color=&amp;#x27;rgb(0,0,0)&amp;#x27;,
            width=0
        )
    ),
    line=Line(
        color=&amp;#x27;#1f77b4&amp;#x27;,
        width=1
    )
)
       
data = Data([trace1, trace2, tracebound])
layout = Layout(
    margin=Margin(
        l=0,
        r=0,
        b=0,
        t=0
    ),
    legend=Legend(
        y=0.5,
        traceorder=&amp;#x27;reversed&amp;#x27;,
        font=Font(
            size=16
        ),
        yref=&amp;#x27;paper&amp;#x27;
    ),
    
    scene=Scene(
        xaxis=XAxis(title=&amp;#x27;longitude&amp;#x27;),
        yaxis=YAxis(title=&amp;#x27;latitude&amp;#x27;),
        zaxis=ZAxis(title=&amp;#x27;date&amp;#x27;)
    )
)
fig = Figure(data=data, layout=layout)
plot_url = py.plot(fig, filename=&amp;#x27;Taiwan dengue cases (indigenous or imported) space-time map&amp;#x27;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ps: the python environment has to complete the connection api key configuration before using the code above. &lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Using nbconvert to convert ipynb to slides in html</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/08/27/using_nbconverttoslides/" type="text/html" />
            <id>http://wcchin.github.io/2015/08/27/using_nbconverttoslides/</id>
            <updated>2015-08-27T12:06:00Z</updated>
            
            <summary type="html">This is a note on using nbconvert to make slides from ipynb to html, with markdown and codes using jupyter.
jupyter, nbconvert have to be installed in the computer.</summary>
            <content type="html">&lt;p&gt;This is a note on using nbconvert to make slides from ipynb to html, with markdown and codes using jupyter.
jupyter, nbconvert have to be installed in the computer.&lt;/p&gt;
&lt;h2&gt;Prepare the file&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;open a jupyter from terminal:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ pyenv shell miniconda-3.9.1
$ ipython notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;create a file (.ipynb), maybe a python2 file or R or something else which code you are going to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the text page, change the &lt;code&gt;Code&lt;/code&gt; to &lt;code&gt;Markdown&lt;/code&gt;, choose &lt;code&gt;Slideshow&lt;/code&gt; in Cell Toolbar.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select one of the item in the Slide Type in the heading of each cell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type in markdown syntax, use tex syntax to type equation (MathJax is supported).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click save, or wait until autosave.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Convert to slides:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In terminal, change directory to where the .ipynb is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type this in terminal, suppose the .ipynb file&amp;rsquo;s name is &lt;code&gt;filename&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ jupyter nbconvert --to slides filename.ipynb --reveal-prefix &amp;quot;http:&amp;#x2F;&amp;#x2F;cdn.jsdelivr.net&amp;#x2F;reveal.js&amp;#x2F;2.5.0&amp;quot;
$ ## or
$ jupyter nbconvert --to slides filename.ipynb --reveal-prefix &amp;quot;http:&amp;#x2F;&amp;#x2F;cdn.jsdelivr.net&amp;#x2F;reveal.js&amp;#x2F;2.5.0&amp;quot; --post serve
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;a file name &lt;code&gt;filename.slides.html&lt;/code&gt; will be created, open it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to change the theme from default to other provided theme, in address bar, add &lt;code&gt;?theme=sky&lt;/code&gt; after the &lt;code&gt;filename.slides.html&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;other theme options: simple (default), sky, beige, solarized, serif, night, moon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to change the default transition to other provided way, same as changing the theme, add &lt;code&gt;?transition=convex&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;other transition options: none, fade, slide, convex, concave, zoom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the themes still not meet your ideal slides, add a file in the same directory name &lt;code&gt;custom.css&lt;/code&gt;, use this to alter the looks of the page, font style etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Taada&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width=&#34;800&#34; height=&#34;600&#34; src=&#34;http://wcchin.github.io/assets/ipyslides/testing_slides.slides.html?theme=sky?transition=convex&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</content>
        </entry>
    
        <entry>
            <title>Adding math formula</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/08/21/Including_mathjax/" type="text/html" />
            <id>http://wcchin.github.io/2015/08/21/Including_mathjax/</id>
            <updated>2015-08-21T16:00:00Z</updated>
            
            <summary type="html">Testing &lt;a href=&#34;https://www.mathjax.org&#34; target=&#34;_blank&#34;&gt;MathJax&lt;/a&gt;</summary>
            <content type="html">&lt;p&gt;Testing &lt;a href=&#34;https://www.mathjax.org&#34; target=&#34;_blank&#34;&gt;MathJax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;$$ GPR_{t}A = W_{AB} \times \frac{GPR_{t-1}B}{out_B} $$&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;installing&amp;rdquo; steps is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;include the CDN in &lt;head&gt; &amp;hellip; &lt;/head&gt;, in the case of mynt&amp;rsquo;s quick start template, this could be added in the page.header.html file.&lt;/li&gt;
&lt;li&gt;type the formula in tex&amp;rsquo;s syntax, using the double $ as the entering and exiting characters, so that the formula is between double $ pair. &lt;/li&gt;
&lt;li&gt;note that in default setting, the inline math mode is not supported, namely the single $ pair. To use this, some code is needed to be added to overwrite this setting. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;note: I tried to install the mathjax js in asset, and it is simple and worked. But, the generating time becomes longer, like a few seconds, maybe is because of the files that come with the js are quite large. So, I changed back to use the officially provided CDN. &lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Adding commenting system</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/08/20/Added_disqus/" type="text/html" />
            <id>http://wcchin.github.io/2015/08/20/Added_disqus/</id>
            <updated>2015-08-20T16:00:00Z</updated>
            
            <summary type="html">In order to get feedbacks from friends, I added the Disqus commenting system in this site.</summary>
            <content type="html">&lt;p&gt;In order to get feedbacks from friends, I added the Disqus commenting system in this site.&lt;/p&gt;

&lt;p&gt;Adding a Disqus comment system in a static website is not difficult:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sign-up on &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34;&gt;Disqus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Go to Settings, Admin.&lt;/li&gt;
&lt;li&gt;Add new site and setup.&lt;/li&gt;
&lt;li&gt;Go to Install, Universal Code, and copy the codes to the template/layout html file.&lt;/li&gt;
&lt;li&gt;Regenerate the website, and push to the hosting server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thats all.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>First post of the mini-lab</title>
            <link rel="alternate" href="http://wcchin.github.io/2015/08/03/First_post/" type="text/html" />
            <id>http://wcchin.github.io/2015/08/03/First_post/</id>
            <updated>2015-08-03T16:00:00Z</updated>
            
            
            <content type="html">&lt;h5&gt;Welcome to &lt;a href=&#34;https://wcchin.github.io&#34; target=&#34;_blank&#34;&gt;Benny.mini-lab&lt;/a&gt;.&lt;/h5&gt;
&lt;p&gt;This is a place for storing what has come to my mind, and what I&amp;rsquo;ve done&lt;/p&gt;

&lt;p&gt;I created this website using the &lt;a href=&#34;http://mynt.uhnomoli.com&#34; target=&#34;_blank&#34;&gt;mynt&lt;/a&gt;, a static site generator using python and jinja.&lt;/p&gt;

&lt;p&gt;The style of the website is inspired by the &lt;a href=&#34;http://leafletjs.com&#34; target=&#34;_blank&#34;&gt;leafletjs&lt;/a&gt; and &lt;a href=&#34;http://getskeleton.com&#34; target=&#34;_blank&#34;&gt;skeleton&lt;/a&gt; website. These websites showed the beauty and power of simplicity. 
This website&amp;rsquo;s template was modified from the mynt&amp;rsquo;s &lt;em&gt;init&lt;/em&gt; site with the skeleton css.&lt;/p&gt;

&lt;p&gt;Currently, the &lt;a href=&#34;http://wcchin.github.io/about/&#34;&gt;about&lt;/a&gt; page was done. Two published paper that I have a little contribution were added in the &lt;a href=&#34;http://wcchin.github.io/findings/&#34;&gt;findings&lt;/a&gt; page.
The other pages will be fill-in while I am working.&lt;/p&gt;

&lt;p&gt;Thanks for visiting.&lt;/p&gt;
</content>
        </entry>
    
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chin.Mini Lab - Blogs</title><link href="https://wcchin.github.io/" rel="alternate"></link><link href="https://wcchin.github.io/feeds/blogs.atom.xml" rel="self"></link><id>https://wcchin.github.io/</id><updated>2019-08-17T00:00:00+08:00</updated><subtitle>a Geographer, Cartographer, &amp; GIScientist</subtitle><entry><title>Updated pyreveal and created carlae</title><link href="https://wcchin.github.io/updated-pyreveal-and-created-carlae.html" rel="alternate"></link><published>2019-08-17T00:00:00+08:00</published><updated>2019-08-17T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2019-08-17:/updated-pyreveal-and-created-carlae.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;Recently I have updated the pyreveal package, to drop the dependencies that seems not relevent anymore, and simplify the installation process. In addition, I also added some small functions. &lt;/p&gt;
&lt;p&gt;Then, when I  was writing the readme file, I have an idea that I want to make a single page website …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;Recently I have updated the pyreveal package, to drop the dependencies that seems not relevent anymore, and simplify the installation process. In addition, I also added some small functions. &lt;/p&gt;
&lt;p&gt;Then, when I  was writing the readme file, I have an idea that I want to make a single page website for the project, which should have lie on the docs directory in the github project. But then I found no project to make a simple single page static site. The current avalable projects are all for building blogs, documentation, wikis or CMS, which may be small or large website, but none of them are for single page. Well, maybe for single page people will just write the html from some single page template downloaded from some website. &lt;/p&gt;
&lt;p&gt;But still, I wanted to automatic the process of making single page static site, so I don't need to redo the similar thing whenever I have updated a project or created a new small open source project. That leads me start developing the Carlae, which took me one day. &lt;/p&gt;
&lt;p&gt;Carlae is a suple simple stupid program to automatically create a single page website from the readme file. Add some yaml front matter on the readme file, call &lt;code&gt;carlae&lt;/code&gt;, and you get the project page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the single page created by carlae" src="/images/post/carlae_page.png" title="the single page created by carlae"&gt;&lt;/p&gt;
&lt;p&gt;A demo of carlae page, for the curlae project page. The template is created based on the skeleton.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the updated pyreveal" src="/images/post/demo_pyreveal.png" title="the simple demo on pyreveal"&gt;&lt;/p&gt;
&lt;p&gt;A demo of working pyreveal. &lt;/p&gt;</content><category term="pyreveal"></category><category term="carlae"></category><category term="markdown"></category><category term="python"></category><category term="visualisation"></category></entry><entry><title>A demonstration of how to use colouringmap and vmapper to generate a map in python</title><link href="https://wcchin.github.io/a-demonstration-of-how-to-use-colouringmap-and-vmapper-to-generate-a-map-in-python.html" rel="alternate"></link><published>2017-06-08T00:00:00+08:00</published><updated>2017-06-08T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2017-06-08:/a-demonstration-of-how-to-use-colouringmap-and-vmapper-to-generate-a-map-in-python.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;Some background&lt;/p&gt;
&lt;p&gt;This demonstration shows how to use the colouringmap and vmapper packages to generate choropleth map. The data format that is using in these packages are the GeoPandas GeoDataFrame, which has a table-like dataframe, with one of the column to store the geometry, and a crs atribute to store …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;Some background&lt;/p&gt;
&lt;p&gt;This demonstration shows how to use the colouringmap and vmapper packages to generate choropleth map. The data format that is using in these packages are the GeoPandas GeoDataFrame, which has a table-like dataframe, with one of the column to store the geometry, and a crs atribute to store the projection of the spatial features. &lt;/p&gt;
&lt;p&gt;The colouringmap package is used to generate levels of each row of spatial feature, and then assign a color to each of them. 
After that, you can choose to map the spatial features with the colours using matplotlib or other drawing (plot) packages. The geometry in geopandas is one of the shapely objects (polygon, multipolygon, point, or linestring). &lt;/p&gt;
&lt;p&gt;Or, you can choose to use the vmapper package to create a map in vector file format - svg. Svg can be used in inkscape for further figure processing. It is also the native format for inkscape. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;First of all, import the packages that will be used in this tutorial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;colouringmap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;theme_mapping&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tm&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;vmapper&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;geopandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;gpd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;shapely.ops&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cascaded_union&lt;/span&gt; &lt;span class="c1"&gt;## this is for disolving the goemetry of basic statistic unit into townships&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, read the data into the environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/path/to/file/vil_67_N_C.shp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, prepare the density values&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NUMPOINTS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cdens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cdens&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cdens&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, use the colouring_sequence function to generate the level list, and also the colour list, that have the same length and in the same order as the gdf. level_list contain the level of each row, and colour_list has the colour of each row. Each row is a geometry of the spatial entities. The breaking method used here is the natural break, which is the default break for ESRI arcgis, and the break number is set to 7. The color scale map that is used in this package is imported from the &lt;a href="https://jiffyclub.github.io/palettable/" target="blank"&gt;Palettable for python&lt;/a&gt;, v3.0.0. So, you can go there and search for the color group and name from there, and check how is them called in this package in &lt;a href="https://github.com/wcchin/colouringmap" target="blank"&gt;here&lt;/a&gt;, where you can also find the list of valid break method. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;level_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colour_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colour_tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colouring_sequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colorbysequence&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cdens&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;break_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;natural_break&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;break_N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color_group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmocean_sequential&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Turbid_10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following demo how to prepare the label for each row of spatial feature. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;countyname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;tn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;townname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;vn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;villagenam&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;namelab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:count=&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;vn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nlabel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namelab&lt;/span&gt;
&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level_list&lt;/span&gt;
&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colour_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The spatial feature is smaller in the previous section. So, we want to dissolve them and forming a larger area that represent the larger administrative boundary, to map it together with the smaller resolution choropleth map. So later we will overlap these geodataframe and make the larger one transparent. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tnset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;t_geom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tnset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;townname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;temp_g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;town_bound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cascaded_union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t_geom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;town_bound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tnset&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;tgdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GeoDataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;t_geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;crs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following shows how to generate svg map with vmapper. First, prepare a map, that will be an interactive map (zoom, pan using mouse directly). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vmapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;## interactive will use the SVGPan.js, which will be copy automatically&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, add the larger layer to the map, which color is set to 'transparent', so it will not has fill color.
The firstly added layer will be draw first, so it will be the lowest on the map. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_geodataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tgdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layername&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;township&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transparent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, add the smaller resolution layer (finer). This one will set the color for each row, assigned from the colouringmap package, and also include the label created from above. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_geodataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layername&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;crime_density&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;draw_setting&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labelby&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nlabel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idby&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;VILLCODE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colorby&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="n"&gt;hovercolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;hoveropacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hoverstroke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#FF0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hoverswidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#FFF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;showlabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, export them to a file, to the current folder (your current working directory).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testing_taipei_crime_map2.svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result will be something like this: 
(screenshot)&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot of the svg map" src="/images/demo_colouring_vmapper.png" title="svg map with colouringmap and vmapper"&gt;&lt;/p&gt;
&lt;p&gt;and the demo of svg:&lt;/p&gt;
&lt;p&gt;&lt;object id="svg1" data="/svgs/testing_taipei_crime_map2.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/testing_taipei_crime_map2.svg"&gt; click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;updated (2017-06-10)&lt;/em&gt;:&lt;br&gt;
updated to include legend and text with the latest version of vmapper.&lt;/p&gt;</content><category term="colouringmap"></category><category term="vmapper"></category><category term="svg"></category><category term="python"></category><category term="visualisation"></category></entry><entry><title>Applying space-time info. to explore disease process</title><link href="https://wcchin.github.io/applying-space-time-info-to-explore-disease-process.html" rel="alternate"></link><published>2017-05-23T00:00:00+08:00</published><updated>2017-05-23T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2017-05-23:/applying-space-time-info-to-explore-disease-process.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;Abstract:
Dengue Fever (DF) data is recorded as a space-time point data, i.e. each record contains a spatial location, and a temporal location. Previous studies often use clustering analysis method to analyze this type of disease case data, to search for spatial or space-time cluster areas (hot-spots), and connect …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;Abstract:
Dengue Fever (DF) data is recorded as a space-time point data, i.e. each record contains a spatial location, and a temporal location. Previous studies often use clustering analysis method to analyze this type of disease case data, to search for spatial or space-time cluster areas (hot-spots), and connect the clusters manually. The process between disease clusters has been neglected in previous studies. 
In disease diffusion processes, transmissions may experience a temporal lag for an incubation period, that is the time between infection and disease emergence. Thus a temporal lag between the transmission pairs should be considered in the understanding of disease diffusion. This can help to systematically model the disease diffusion process, and construct the relationships between cases and detect the process chains between clusters. 
Therefore, the aim of this case study is to detect sub-clusters from the annual DF cases and identify processes between the sub-clusters.&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/210724781" width="640" height="320" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/210724781"&gt;Dengue Fever 2002&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/210724791" width="640" height="320" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/210724791"&gt;Dengue Fever 2011&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/210724798" width="640" height="320" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/210724798"&gt;Dengue Fever 2014&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/210724814" width="640" height="320" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/210724814"&gt;Dengue Fever 2015&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;</content><category term="open data"></category><category term="demo"></category><category term="TaPiTaS"></category><category term="Dengue Fever"></category></entry><entry><title>Restructured vmapper</title><link href="https://wcchin.github.io/restructured-vmapper.html" rel="alternate"></link><published>2017-04-22T00:00:00+08:00</published><updated>2017-04-22T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2017-04-22:/restructured-vmapper.html</id><content type="html">&lt;hr&gt;
&lt;p&gt;Vmapper is a simple python library for creating map in python, from reading spatial data source to exporting map.
&lt;a href="/vmapper.html"&gt;check this project page&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The example is shown here:&lt;/p&gt;
&lt;p&gt;&lt;object id="svg1" data="/svgs/vmapperexample.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/vmapperexample.svg"&gt; click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;</content><category term="svg"></category><category term="map"></category><category term="vmapper"></category></entry><entry><title>Playing with TGOD</title><link href="https://wcchin.github.io/playing-with-tgod.html" rel="alternate"></link><published>2017-04-16T00:00:00+08:00</published><updated>2017-04-16T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2017-04-16:/playing-with-tgod.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;TGOD is a python package that can download some Taiwan open data. Here I am playing with the Taipei bus api and youbike api. The result is as the link show: 
&lt;a href="http:140.112.64.67:2170"&gt;a demo site of the usage of TGOD&lt;/a&gt;. The demo site is created using Flask and skeleton css.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="/images/demo_site_170416.png" title="a demo site"&gt;&lt;/p&gt;
&lt;p&gt;TGOD …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;TGOD is a python package that can download some Taiwan open data. Here I am playing with the Taipei bus api and youbike api. The result is as the link show: 
&lt;a href="http:140.112.64.67:2170"&gt;a demo site of the usage of TGOD&lt;/a&gt;. The demo site is created using Flask and skeleton css.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="/images/demo_site_170416.png" title="a demo site"&gt;&lt;/p&gt;
&lt;p&gt;TGOD: packed a python package that is for downloading the real-time Taiwan open data, and static map layers in pbf format. 
check this: &lt;a href="https://wcchin.github.io/tgod/"&gt;Taiwan Geographic Open Data&lt;/a&gt;&lt;/p&gt;</content><category term="open data"></category><category term="demo"></category><category term="youbike"></category><category term="bus"></category></entry><entry><title>Current works, and changed website</title><link href="https://wcchin.github.io/current-works-and-changed-website.html" rel="alternate"></link><published>2017-04-15T00:00:00+08:00</published><updated>2017-04-15T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2017-04-15:/current-works-and-changed-website.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;It has been a long time since my last post. &lt;/p&gt;
&lt;p&gt;First thing is about this personal blog. It have been migrated from mynt to pelican, a well-known, well-developed, and well-maintained static-site-generator in python. 
One good thing from a well-XX generator is that they have a lot of fully functional and …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;It has been a long time since my last post. &lt;/p&gt;
&lt;p&gt;First thing is about this personal blog. It have been migrated from mynt to pelican, a well-known, well-developed, and well-maintained static-site-generator in python. 
One good thing from a well-XX generator is that they have a lot of fully functional and professional looking templates. The one I have been using with mynt, is a very simple, lightweight, skeleton css. And, it is a skeleton! I don't have time to develop a template for it.&lt;/p&gt;
&lt;p&gt;So, I changed to pelican, and use one of the theme in the pelican-themes repos, which is this. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Another things are the works I have been working on. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;the visualization of the Taipei-MRT hourly origin-destination flows. 
    &lt;iframe src="https://player.vimeo.com/video/210724895" width="640" height="333" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
    &lt;p&gt;&lt;a href="https://vimeo.com/210724895"&gt;捷運分時起迄流量資料視覺化(階段2)&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the visualization of the dengue fever cases. 
    &lt;iframe src="https://player.vimeo.com/video/210724814" width="640" height="320" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
    &lt;p&gt;&lt;a href="https://vimeo.com/210724814"&gt;anim2_3p_2015be&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;packed a python package that is for downloading the real-time Taiwan open data, and static map layers in pbf format. Link: &lt;a href="https://wcchin.github.io/tgod/"&gt;Taiwan Geographic Open Data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;writing another paper, that took me a lot of times; and also preparing for my Ph.D proposal. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="MRT"></category><category term="open data"></category><category term="visualization"></category><category term="writings"></category></entry><entry><title>Working on Taipei City Open data -- Vehicle Detector (VD)</title><link href="https://wcchin.github.io/working-on-taipei-city-open-data-vehicle-detector-vd.html" rel="alternate"></link><published>2016-12-30T00:00:00+08:00</published><updated>2016-12-30T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-12-30:/working-on-taipei-city-open-data-vehicle-detector-vd.html</id><content type="html">&lt;hr&gt;
&lt;p&gt;using python and matplotlib, matplotlib animation function.&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/197269715" width="640" height="640" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/197269715"&gt;Taipei City Vehicle Detector (total volume) data in June 2016&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</content><category term="VD"></category><category term="open data"></category><category term="visualization"></category></entry><entry><title>Exporting jupyter slides to html/pdf</title><link href="https://wcchin.github.io/exporting-jupyter-slides-to-htmlpdf.html" rel="alternate"></link><published>2016-10-07T00:00:00+08:00</published><updated>2016-10-07T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-10-07:/exporting-jupyter-slides-to-htmlpdf.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;Exporting jupyter slides to html / pdf&lt;/h2&gt;
&lt;p&gt;This snippet is a file that use nbconvert and decktape to convert the revealjs html or jupyter slides into html/pdf.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;run this code to convert to pdf from notebook:
python export_reveal.py --notebook jupyter_notebook_file_name.ipynb&lt;/p&gt;
&lt;p&gt;run this code to convert to pdf …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;Exporting jupyter slides to html / pdf&lt;/h2&gt;
&lt;p&gt;This snippet is a file that use nbconvert and decktape to convert the revealjs html or jupyter slides into html/pdf.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;run this code to convert to pdf from notebook:
python export_reveal.py --notebook jupyter_notebook_file_name.ipynb&lt;/p&gt;
&lt;p&gt;run this code to convert to pdf from converted html file:
python export_reveal.py --html reveal_js_file_name.html&lt;/p&gt;
&lt;p&gt;additional options:
-o, --output    specifying an output filename, 
-c              shortcut custimization button for customizing reveal using sky theme and concave transition
--trans         for changing transition method: concave, zoom...
--theme         for changing theme, default to simple.css&lt;/p&gt;
&lt;p&gt;for more detail, please check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nbconvert - https://github.com/jupyter/nbconvert&lt;/li&gt;
&lt;li&gt;decktape - https://github.com/astefanutti/decktape&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;p&gt;https://gist.github.com/wcchin/d25dea4c7f68acedb6d923f67bb0549c&lt;/p&gt;
&lt;script src="https://gist.github.com/wcchin/d25dea4c7f68acedb6d923f67bb0549c.js"&gt;&lt;/script&gt;</content><category term="export"></category><category term="jupyter"></category><category term="revealjs"></category></entry><entry><title>Gephi tutorial site</title><link href="https://wcchin.github.io/gephi-tutorial-site.html" rel="alternate"></link><published>2016-09-24T00:00:00+08:00</published><updated>2016-09-24T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-09-24:/gephi-tutorial-site.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;Announcement: Gephi tutorial site in chinese is built&lt;/h2&gt;
&lt;p&gt;So, the site is built for a lab event in a workshop in 9/22. The reason I built this is because I think these basic guide might be needed in the begining of using this tool.&lt;/p&gt;
&lt;p&gt;The website is served using …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;Announcement: Gephi tutorial site in chinese is built&lt;/h2&gt;
&lt;p&gt;So, the site is built for a lab event in a workshop in 9/22. The reason I built this is because I think these basic guide might be needed in the begining of using this tool.&lt;/p&gt;
&lt;p&gt;The website is served using the lab server:
&lt;a href="http://wenlab.geog.ntu.edu.tw/gephi_tutorial/" target="_blank"&gt; Gephi tutorial site &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition, a webpage is built with the gephi plugin -- Sigmajs Exporter -- &lt;a href="http://wenlab.geog.ntu.edu.tw/gephi_sigma/network/#"&gt; global migration network &lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The website is built with a static-site generator, called &lt;a href="http://www.mkdocs.org/" target="_blank"&gt;Mkdocs&lt;/a&gt;, and they have the readthedocs template built-in. &lt;/p&gt;</content><category term="documentation"></category><category term="gephi"></category></entry><entry><title>Space-time process of dengue transmission (part 2) -- the ANIMATED Progression Graph</title><link href="https://wcchin.github.io/space-time-process-of-dengue-transmission-part-2-the-animated-progression-graph.html" rel="alternate"></link><published>2016-08-04T00:00:00+08:00</published><updated>2016-08-04T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-08-04:/space-time-process-of-dengue-transmission-part-2-the-animated-progression-graph.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;Upgrading the visualization of the result&lt;/h2&gt;
&lt;p&gt;In this animation version of the calculation result, I use standard ellipse for visualizing the subclusters, and use different colours for different type of subclusters, which included the chained subclusters (in red), the solo subclusters (in yellow), and the noise (non-clustering cases, in grey …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;Upgrading the visualization of the result&lt;/h2&gt;
&lt;p&gt;In this animation version of the calculation result, I use standard ellipse for visualizing the subclusters, and use different colours for different type of subclusters, which included the chained subclusters (in red), the solo subclusters (in yellow), and the noise (non-clustering cases, in grey). &lt;/p&gt;
&lt;p&gt;And, the result use the svg morphing animation for viewing the development process of the subclusters. The original intention is also to include the merging, splitting behaviors of the chained subclusters, but the svg morphing animation has a rule that the shape must have exactly same coordinates structure, which means the number of vertexes, and the M/L/Z (move to/line to/close line). Merging and splitting must change the M/L/Z structure, e.g. splitting has one shape at first, that has 1M and 1Z, after splitting will have 2M 2Z and -1L. 
So the plan has been changed. I only use different colors to separate the chained and solo clusters. The chained cluster will have several subclusters appeared at the same time.&lt;/p&gt;
&lt;p&gt;To further upgrading the visualization, I have two more ideas:&lt;br&gt;
1. use the convex hull of each subcluster to show the location of the subcluster by time, and change the color to scale color for showing the density, because using convex hull might leads to a visualization confusing and misunderstanding(big shape with same color, means more serious, but the density might be lower). So, changing solid color to scale color or scale opacity must be done if this option is chosen.
2. use standard ellipse instead of circle, for better capturing the location of subclusters. &lt;/p&gt;
&lt;p&gt;The convex hull option has two challenges, first is to identify the convex hull, this part should be easy in python, because scipy has a function for this job; second is to change the colors to scale color or opaction, this part is relatively harder, because the scaling means I have to identify the max and min density, which has no standard level (e.g. how many cases per square meter can be consider the max density?). &lt;/p&gt;
&lt;p&gt;The standard ellipse option also has two challenges, first is to draw the ellipse, which problem related to the calculation of standard ellipse; second is to draw the circle (for subclusters at their begining that might have only one case, which means cannot calculate the standard distance, then I use the circle to show them) in the same scale. &lt;/p&gt;
&lt;p&gt;BTW, a legend is added, and the typo in footer is corrected.&lt;/p&gt;
&lt;h2&gt;The result&lt;/h2&gt;
&lt;p&gt;Open a new windows with this &lt;a href="/svgs/event_4_morph_ellipse.svg"&gt; link &lt;/a&gt; to get a better view. 
&lt;object id="svg1" data="/svgs/event_4_morph_ellipse.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;  &lt;/p&gt;
&lt;h2&gt;reference&lt;/h2&gt;
&lt;p&gt;how to calculate the standard ellipse
&lt;a href="http://resources.esri.com/help/9.3/arcgisdesktop/com/gp_toolref/spatial_statistics_tools/how_directional_distribution_colon_standard_deviational_ellipse_spatial_statistics_works.htm" target="_blank"&gt;How Directional Distribution: Standard Deviational Ellipse (Spatial Statistics) works (by esri) &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;how to draw the ellipse in python using shapely: the accepted answer by HYRY
&lt;a href="http://stackoverflow.com/questions/15445546/finding-intersection-points-of-two-ellipses-python" target="_blank"&gt; Finding intersection points of two ellipses (Python) &lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="svg"></category><category term="dengue"></category></entry><entry><title>Space-time process of dengue transmission -- the Progression Graph</title><link href="https://wcchin.github.io/space-time-process-of-dengue-transmission-the-progression-graph.html" rel="alternate"></link><published>2016-07-29T00:00:00+08:00</published><updated>2016-07-29T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-07-29:/space-time-process-of-dengue-transmission-the-progression-graph.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;Rewrite of codes&lt;/h2&gt;
&lt;p&gt;This is a result from rewriting the codes of the study from a colleague. The concept behind the algorithm is to identify the space-time cluster based on the appearance of the cases. Then, track the temporal chain of the cases.&lt;/p&gt;
&lt;h2&gt;The data&lt;/h2&gt;
&lt;p&gt;Lets take a look on …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;Rewrite of codes&lt;/h2&gt;
&lt;p&gt;This is a result from rewriting the codes of the study from a colleague. The concept behind the algorithm is to identify the space-time cluster based on the appearance of the cases. Then, track the temporal chain of the cases.&lt;/p&gt;
&lt;h2&gt;The data&lt;/h2&gt;
&lt;p&gt;Lets take a look on the data -- the happening of cases, using the animated svg to present:
&lt;object id="svg1" data="/svgs/prog_event_3.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/prog_event_3.svg"&gt; The dengue cases. click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;The result&lt;/h2&gt;
&lt;p&gt;After the space-time clustering and progression tracking, this is the result, please wait for a few minutes, because the earlier cases did not form cluster, so it will have nothing to show at the begining:
&lt;object id="svg1" data="/svgs/prog_map_3.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/prog_map_3.svg"&gt; The space-time clusters and progressions. click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;</content><category term="python"></category><category term="svg"></category><category term="dengue"></category></entry><entry><title>'Processing' human movements in Taipei City</title><link href="https://wcchin.github.io/processing-human-movements-in-taipei-city.html" rel="alternate"></link><published>2016-07-12T00:00:00+08:00</published><updated>2016-07-12T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-07-12:/processing-human-movements-in-taipei-city.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;working on Taipei City's open data&lt;/h2&gt;
&lt;p&gt;Taipei City's open data contain quite a lots and useful data about &lt;a href="https://taipeicity.github.io/traffic_realtime/"&gt;human movement&lt;/a&gt;, which included vehicle detector for street vehicles number, bus location data, bike sharing service available situation. 
Beside this, we have also obtained the bike sharing rental information, which include the …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;working on Taipei City's open data&lt;/h2&gt;
&lt;p&gt;Taipei City's open data contain quite a lots and useful data about &lt;a href="https://taipeicity.github.io/traffic_realtime/"&gt;human movement&lt;/a&gt;, which included vehicle detector for street vehicles number, bus location data, bike sharing service available situation. 
Beside this, we have also obtained the bike sharing rental information, which include the timestamps and stations of rent/return for each rental event. 
Using these data, I created a animated visualization using the &lt;a href="https://processing.org/"&gt;Processing 3&lt;/a&gt; tool.&lt;/p&gt;
&lt;p&gt;Although there is an alternative to create a web-based processing script using the &lt;a href="http://processingjs.org/"&gt;processing.js&lt;/a&gt; as a convertion tool, the data I included in the animation is too large for webpage and browser loading. 
So, instead of making a web-based viz, I recorded the results as video.&lt;/p&gt;
&lt;p&gt;First, this is a simulation of moving vehicles on the streets network, that they turn randomly at the junctions.
&lt;iframe src="https://player.vimeo.com/video/168713881" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/168713881"&gt;simulation - moving cars on streets taking turn randomly - v0.2&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Using vehicle detector for the calibration in a modified PageRank, the moving process and turning proportion is simulated in this video: &lt;br&gt;
&lt;iframe src="https://player.vimeo.com/video/168714357" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/168714357"&gt;simulation - moving cars on streets turning with the estimated probability - v0.2&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Using the Taipei's Youbike (a Bike Sharing System) Origin-Destination data, the rental events is animated in this video:
&lt;iframe src="https://player.vimeo.com/video/172241655" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/172241655"&gt;Taipei Youbike Origin-Destination rental movement - time data in May 2015&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;The comparison between the results of Taipei City's Youbike with the New York City's Citibike rental events:
&lt;iframe src="https://player.vimeo.com/video/172311955" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/172311955"&gt;bike sharing trips temporal data visualization&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;The latest work is to show the location of buses in Taipei City and the area around:
&lt;iframe src="https://player.vimeo.com/video/174331241" width="640" height="369" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/174331241"&gt;One day of Taipei City&amp;#039;s buses&lt;/a&gt; from &lt;a href="https://vimeo.com/user11082431"&gt;Benny Chin&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;a href="https://drive.google.com/file/d/0B41yDf_RGLPSTFZrLXpmMW02TTA/view?usp=sharing"&gt;go to google drive&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="processing"></category></entry><entry><title>Visualizing global migration</title><link href="https://wcchin.github.io/visualizing-global-migration.html" rel="alternate"></link><published>2016-07-12T00:00:00+08:00</published><updated>2016-07-12T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-07-12:/visualizing-global-migration.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;The global migration network&lt;/h2&gt;
&lt;p&gt;The migration data is obtained from the World DataBank website "&lt;a href="http://databank.worldbank.org/data/reports.aspx?source=global-bilateral-migration#"&gt;Global Bilateral Migration&lt;/a&gt;".
It is a bilateral matrix, so using each row/column of the matrix as the nodes, and the cells between each pair of row-column as the weight of the edges, this data could …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;The global migration network&lt;/h2&gt;
&lt;p&gt;The migration data is obtained from the World DataBank website "&lt;a href="http://databank.worldbank.org/data/reports.aspx?source=global-bilateral-migration#"&gt;Global Bilateral Migration&lt;/a&gt;".
It is a bilateral matrix, so using each row/column of the matrix as the nodes, and the cells between each pair of row-column as the weight of the edges, this data could be shown as a graph.&lt;/p&gt;
&lt;h2&gt;The locations of nodes&lt;/h2&gt;
&lt;p&gt;Using the countries' name, I used the python geocoder package, with the ArcGIS as provider, for doing the batch geocoding job. Some of them are not geocoded. These countries were geocoded using Google provider plus manually change the country's name according to wikipedia.
"Refugees" rows/columns were ignored, because it is not a country/location.&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;The year 1960, 1970, 1980, 1990, 2000 were included from the data source. So they were mapped separately.&lt;/p&gt;
&lt;p&gt;&lt;object id="svg1" data="/svgs/workfile_4_1960.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/workfile_4_1960.svg"&gt; Year 1960. click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;object id="svg1" data="/svgs/workfile_4_1970.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/workfile_4_1970.svg"&gt; Year 1970. click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;object id="svg1" data="/svgs/workfile_4_1980.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/workfile_4_1980.svg"&gt; Year 1980. click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;object id="svg1" data="/svgs/workfile_4_1990.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/workfile_4_1990.svg"&gt; Year 1990. click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;object id="svg1" data="/svgs/workfile_4_2000.svg" type="image/svg+xml" style="width: 650px; height: 480px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/workfile_4_2000.svg"&gt; Year 2000. click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;</content><category term="python"></category><category term="svg"></category></entry><entry><title>the animated svg for viewing Bike Sharing OD relationship</title><link href="https://wcchin.github.io/the-animated-svg-for-viewing-bike-sharing-od-relationship.html" rel="alternate"></link><published>2016-07-09T00:00:00+08:00</published><updated>2016-07-09T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-07-09:/the-animated-svg-for-viewing-bike-sharing-od-relationship.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;animated svg&lt;/h2&gt;
&lt;p&gt;At first, I use processing for showing the spatial-temporal distribution of the bike sharing origin-destination movements.
The animation is recorded as in video: &lt;a href="https://drive.google.com/file/d/0B41yDf_RGLPSTFZrLXpmMW02TTA/view?usp=sharing"&gt;go to google drive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, I remembered that I have seen an animation of moving dot in an image file: &lt;a href="http://kartograph.org/showcase/italia/"&gt;Kartograph - La Bella Italia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;animated svg&lt;/h2&gt;
&lt;p&gt;At first, I use processing for showing the spatial-temporal distribution of the bike sharing origin-destination movements.
The animation is recorded as in video: &lt;a href="https://drive.google.com/file/d/0B41yDf_RGLPSTFZrLXpmMW02TTA/view?usp=sharing"&gt;go to google drive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, I remembered that I have seen an animation of moving dot in an image file: &lt;a href="http://kartograph.org/showcase/italia/"&gt;Kartograph - La Bella Italia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I search for the simple animation script in svg: &lt;a href="https://mdn.mozillademos.org/files/3261/animateMotion.svg"&gt;simple demo for animation in svg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the result: &lt;/p&gt;
&lt;p&gt;&lt;object id="svg1" data="/svgs/ubike_od_20150101_2.svg" type="image/svg+xml" style="width: 650px; height: 800px"&gt;&lt;/object&gt;&lt;br&gt;
&lt;a href="/svgs/ubike_od_20150101_2.svg"&gt; Year 1960. click this and try to pan or zoom-in with your mouse scroll wheel. &lt;/a&gt;  &lt;/p&gt;</content><category term="python"></category><category term="svg"></category><category term="processing"></category></entry><entry><title>the nearest neighbours in two dimensions space</title><link href="https://wcchin.github.io/the-nearest-neighbours-in-two-dimensions-space.html" rel="alternate"></link><published>2016-04-22T00:00:00+08:00</published><updated>2016-04-22T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-04-22:/the-nearest-neighbours-in-two-dimensions-space.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;nearest neighbours&lt;/h2&gt;
&lt;p&gt;Which points are the nearest neighbours, or top N nearest neighbours, are the frequently used procedures in point data analysis. 
Sometimes, we might need to find the neighbours in-radius of some distance. &lt;/p&gt;
&lt;p&gt;K-d tree is one of the data structure for searching the points that is closer to …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;nearest neighbours&lt;/h2&gt;
&lt;p&gt;Which points are the nearest neighbours, or top N nearest neighbours, are the frequently used procedures in point data analysis. 
Sometimes, we might need to find the neighbours in-radius of some distance. &lt;/p&gt;
&lt;p&gt;K-d tree is one of the data structure for searching the points that is closer to a target point that is in k-dimensions. 
E.g. for 2-d points, each point has a x coordinate and a y coordinate, it is called 2-d tree. 
In a 2-d tree, starting from the root, is the first dimension (let say x-dimension), then the second level would be for the second dimension (y-dimension).
The idea is to divide the points into two groups in each level, smaller item go to the left, bigger item go to the right...&lt;/p&gt;
&lt;p&gt;So, the kd-tree helps to reduce the k-dimension nearest neighbours problem into a simpler problem (in terms of complexity), by using the divide-and-conquer trick.&lt;/p&gt;
&lt;h2&gt;working in python&lt;/h2&gt;
&lt;p&gt;In this example, base points are the points in the ground, let says, the shops;
source points are the points that is going to search for the nearest destinations (base points), let says, the location of the people. 
The aim is to locate the shops that is nearby to each person. 
So, it would be for each person, search one time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;spatial&lt;/span&gt;

&lt;span class="n"&gt;xlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# x coordinates of base points...&lt;/span&gt;
&lt;span class="n"&gt;ylist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# y coordinates of base points...&lt;/span&gt;

&lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# x coordinates for the three people&lt;/span&gt;
&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# y coordinates for the three people&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ylist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spatial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KDTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;nn_radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;# the nearby radius for searching&lt;/span&gt;
&lt;span class="n"&gt;nlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_ball_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nn_radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# If x is a single point, returns a list of the indices of the neighbors of x. &lt;/span&gt;
&lt;span class="c1"&gt;# If x is an array of points, returns an object array of shape tuple containing lists of neighbors.&lt;/span&gt;
&lt;span class="c1"&gt;# in this case, it will return an array of list, which represent the index of the nearby neighbours in the data list. &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;besides query_ball_point, there are other methods (from &lt;a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree"&gt;scipy&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_neighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;#Count how many nearby pairs can be formed.&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distance_upper_bound&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#Query the kd-tree for nearest neighbors&lt;/span&gt;
&lt;span class="n"&gt;query_ball_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#Find all pairs of points whose distance is at most r&lt;/span&gt;
&lt;span class="n"&gt;query_pairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;    &lt;span class="c1"&gt;#Find all pairs of points within a distance.&lt;/span&gt;
&lt;span class="n"&gt;sparse_distance_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_distance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Compute a sparse distance matrix&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree"&gt;more details from scipy docs&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category></entry><entry><title>working with heapq in python</title><link href="https://wcchin.github.io/working-with-heapq-in-python.html" rel="alternate"></link><published>2016-04-22T00:00:00+08:00</published><updated>2016-04-22T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-04-22:/working-with-heapq-in-python.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;simple notes on heapq&lt;/h2&gt;
&lt;p&gt;heapq is a data structure to implement (work with) priority queue.&lt;/p&gt;
&lt;p&gt;Let says, there is an array of several numbers. Sometimes, we need to get the top 3 largest number in the array.
One way of getting the max or min result, is to scan all …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;simple notes on heapq&lt;/h2&gt;
&lt;p&gt;heapq is a data structure to implement (work with) priority queue.&lt;/p&gt;
&lt;p&gt;Let says, there is an array of several numbers. Sometimes, we need to get the top 3 largest number in the array.
One way of getting the max or min result, is to scan all of the items (numbers) in the array, which means starting with the first number, then compare it to the second, change the number to the second one if the second is bigger, then continue until the last number. 
Then, do this again with the rest of the numbers to get the second largest, and same procedure again for the third. That means, the complexity would be approximately m x N, that m is the top m largest or smallest, and N is the number of item in the array. &lt;/p&gt;
&lt;p&gt;The other way is perform a sorting procedure to the array, then choose the top 3 number at the front or at the back. This solution's complexity would depend on the sorting algorithm. &lt;/p&gt;
&lt;p&gt;Priority queue (PQ) is like sorting, that do not sort the data in an array. But always pop out the smallest or largest item from the array.&lt;/p&gt;
&lt;p&gt;We can use heapq to implement PQ. heapq construct a heap tree instead of sorting. There are two type of heap tree: min heap and max heap. 
A min heap is a binary tree that the parent is always smaller (or equal) than the children. A max heap is the opposite, that parrent is always larger (or equal) than children. 
So, with a min heap or max heap, it can always pop out the smallest or biggest item (respectively) from the array. &lt;/p&gt;
&lt;h2&gt;heapq in python&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;
    &lt;span class="n"&gt;alist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#first, create a list that populated with items&lt;/span&gt;

    &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#heapify the list, that create a heap tree, inplace&lt;/span&gt;
    &lt;span class="n"&gt;aheap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt;

    &lt;span class="n"&gt;heapsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# this will create a sorted list of the list&lt;/span&gt;

    &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aheap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# add the item 10 into the heap tree&lt;/span&gt;

    &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aheap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# pop out and return the smallest item from the heap tree&lt;/span&gt;

    &lt;span class="n"&gt;aheap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# access the smallest number without pop it out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/2/library/heapq.html"&gt;more details from python docs&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Using tiddler - lightbulb page changed</title><link href="https://wcchin.github.io/using-tiddler-lightbulb-page-changed.html" rel="alternate"></link><published>2016-01-30T00:00:00+08:00</published><updated>2016-01-30T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2016-01-30:/using-tiddler-lightbulb-page-changed.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;page closed~~~&lt;/h3&gt;
&lt;p&gt;The note page was changed to tiddler wiki based.&lt;/p&gt;
&lt;p&gt;I am using tiddlywiki-desktop now, to write the tiddlers(posts) and journals(logs) with it, directly in the mynt staticsite folders.&lt;/p&gt;
&lt;p&gt;The tiddlywiki is now locate in the asset folders, which can be linked to the note page via …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;page closed~~~&lt;/h3&gt;
&lt;p&gt;The note page was changed to tiddler wiki based.&lt;/p&gt;
&lt;p&gt;I am using tiddlywiki-desktop now, to write the tiddlers(posts) and journals(logs) with it, directly in the mynt staticsite folders.&lt;/p&gt;
&lt;p&gt;The tiddlywiki is now locate in the asset folders, which can be linked to the note page via iframe.&lt;/p&gt;
&lt;p&gt;Plus, the tiddlers can be open in a new tab, to show the tiddler and open the tiddlywiki as an independent (static but flowing/interactive) pages.&lt;/p&gt;
&lt;p&gt;Tiddlywiki, a single-page-application, is a wiki style note-taking system. It is designed to be used as a one-file app, that open in the browser(html+js).
Tiddlers are linked to the related tiddlers, just the same as the "wiki" system. (It is a wiki system)&lt;/p&gt;
&lt;p&gt;I am planning on migrating my tiddlyspace tiddlers into this tiddly, since they seem to be closed in the end of 2016.&lt;/p&gt;</content><category term="webpage"></category></entry><entry><title>Pushing items to gh-pages</title><link href="https://wcchin.github.io/pushing-items-to-gh-pages.html" rel="alternate"></link><published>2015-10-31T00:00:00+08:00</published><updated>2015-10-31T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2015-10-31:/pushing-items-to-gh-pages.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;I am new to the 'git' world (a github noob). I use github as a space to store some things that I want to share with public. This website is stored in the gh-pages master branch. I have another repository that is also used as gh-pages, but not as the …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;I am new to the 'git' world (a github noob). I use github as a space to store some things that I want to share with public. This website is stored in the gh-pages master branch. I have another repository that is also used as gh-pages, but not as the master branch. So I am taking this note to remind myself how to sync the branchs.&lt;/p&gt;
&lt;p&gt;The following codes would push things from local to the master branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add --all
git commit -m &amp;#39;the message about what have been changed&amp;#39;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the master branch is the gh-pages branch, then this is done.&lt;br&gt;
The following codes would sync the gh-pages branch with the master:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout gh-pages
git rebase master
git push origin gh-pages
git checkout master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, the gh-pages would be online to the webpage:&lt;br&gt;
https://username.github.io/repositoryname/filename.html&lt;/p&gt;</content><category term="gh-pages"></category><category term="github"></category></entry><entry><title>Using mynt - a static site generator</title><link href="https://wcchin.github.io/using-mynt-a-static-site-generator.html" rel="alternate"></link><published>2015-10-31T00:00:00+08:00</published><updated>2015-10-31T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2015-10-31:/using-mynt-a-static-site-generator.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;This website is generated by using mynt -- a static site generator writen in python. Mynt will convert markdown text file to html by using the corresponding layout. &lt;a href="http://mynt.uhnomoli.com/"&gt;Mynt's website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Mynt is a python2 package, so python2 should be installed in the computer before installing and using mynt. (I am …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;This website is generated by using mynt -- a static site generator writen in python. Mynt will convert markdown text file to html by using the corresponding layout. &lt;a href="http://mynt.uhnomoli.com/"&gt;Mynt's website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Mynt is a python2 package, so python2 should be installed in the computer before installing and using mynt. (I am not sure if it works with python3.)&lt;/p&gt;
&lt;p&gt;To install mynt, type this in command line:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install mynt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Initialize a new project/website&lt;/h2&gt;
&lt;p&gt;To start a new website at a local directory &lt;code&gt;~/project&lt;/code&gt; with the name &lt;code&gt;site-name&lt;/code&gt;, in command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mynt init ~/project/site-name/
## or force remove the existing project before create new project
mynt init -f ~/project/site-name/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Website directory structure&lt;/h3&gt;
&lt;p&gt;Mynt will create the following directories and files in the &lt;code&gt;site-name&lt;/code&gt; directory after the initialize:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;site-name
│   config.yml
│   feed.xml
│   index.html
│
├───archives
│       index.html
├───_assets
│       ├───css
│       │   │   pygments.css
│       │   │   screen.css
│       │   └───_sass
│       │           _base.sass
│       │           config.rb
│       │           screen.sass
│       ├───images
│       │       bg.png
│       │       favicon.ico
│       │       sbg.png
│       └───js
│           │   mynt.min.js
│           └───_src
│                   mynt.js
├───_posts
│       2011-12-04-It-works.md
└───_templates
│       archive.html
│       layout.html
│       page.header.html
│       post.html
│       tag.html
│
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;First thing to do, is to modify the &lt;code&gt;config.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;needed&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;according&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Writing blog posts&lt;/h2&gt;
&lt;p&gt;Posts should be place under the &lt;code&gt;_posts&lt;/code&gt; directory. There is a demo file come with the &lt;code&gt;init&lt;/code&gt;. The demo file's name included the date when it is written (2011-12-04), which format should be followed while creating new post file (.md), to tell mynt when the post is written, so mynt would know how to sort the posts. The following part of the filename will be a part of the filename for the generated html files, which means it will appear at the address bar while people are looking at it.&lt;/p&gt;
&lt;p&gt;Create a new file with file name like &lt;code&gt;2015-10-31-some-name.md&lt;/code&gt;. The header and post content of the file should looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;---
title: hey you
layout: post.html
tags: [testing]
---

## a sectiontitle
post content goes here. 

### a subsection title
blah blah blah...
**Use markdown here**.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the header of the .md file:&lt;br&gt;
- The title &lt;code&gt;hey you&lt;/code&gt; will be the title of the post, and also the title that will appear at the index page.
- the layout &lt;code&gt;post.html&lt;/code&gt;, is telling the mynt which layout file in &lt;code&gt;_templates&lt;/code&gt; to use, for rendering this post.
- the tags of the post.&lt;/p&gt;
&lt;p&gt;The following things after the three dashes, are the content part of the post. Use markdown syntax to write the content. And maybe some html tags in the post if needed.&lt;/p&gt;
&lt;h2&gt;Container&lt;/h2&gt;
&lt;p&gt;Sometimes, blog post is not the only type of post we want to write. For example in this website, I separated the posts into 5 types according to the topic (geograph, lightbulb...). This is the function of container. To add a new container (let say &lt;code&gt;funbox&lt;/code&gt;) for the website, the config.yml file should add the following lines at the bottom of the files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;funbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/funbox/&amp;lt;slug&amp;gt;/&lt;/span&gt;
        &lt;span class="n"&gt;tag_layout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;funbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;
        &lt;span class="n"&gt;tags_url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/funbox/tag/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that &lt;code&gt;funbox.tag.html&lt;/code&gt; file should also be added in the &lt;code&gt;_templates&lt;/code&gt; directory. (you could just copy and paste the &lt;code&gt;tag.html&lt;/code&gt; and rename it)
Then, add the following directories (beside &lt;code&gt;_posts&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;site-name
├───_containers
│   └───funbox
│           2015-10-31-a_first_file.md
├───_templates
│       funboxpost.html
│       funbox.tag.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The format of the post .md file is same as the blog post files, which probably will use the &lt;code&gt;funboxpost.html&lt;/code&gt; as the layout file. &lt;/p&gt;
&lt;h2&gt;Layout templating and sytling&lt;/h2&gt;
&lt;p&gt;Mynt use the jinja2 templating engine. So, the layout files should be written or modified according to jinja2 style templating syntax. &lt;/p&gt;
&lt;p&gt;The styles -- the css and js files, should be place in the &lt;code&gt;_assets/css&lt;/code&gt; and &lt;code&gt;_assets/js&lt;/code&gt;. To get them, let say the &lt;code&gt;_assets/css/skeleton.css&lt;/code&gt;, use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;get_asset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;css/skeleton.css&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;The template of this website is modified based on the initial template file, with the &lt;a href="http://getskeleton.com/"&gt;skeleton&lt;/a&gt; sample file.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Generating website:&lt;/h2&gt;
&lt;p&gt;To generate the website to a directory &lt;code&gt;~/output/target&lt;/code&gt; (&lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;project&lt;/code&gt; directory first, then):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd project

mynt gen site-name output/target
## or, if the output/target is already exist, force overwriting it:
mynt gen -f site-name output/target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The generated html files and folders will appear under the &lt;code&gt;output/target&lt;/code&gt; directory, which can be uploaded to the hosting space like gh-pages.&lt;/p&gt;
&lt;h2&gt;Preview the website/post before publishing&lt;/h2&gt;
&lt;p&gt;Mynt come with a simple function (debug mode) for previewing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mynt serve output/target
## or, to change the preview port
mynt serve output/target -p 8001
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, open the web-browser, and go to the site &lt;code&gt;http://localhost:8001&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Then, possibly, you might need to modify the files, and then &lt;code&gt;mynt gen -f xxx yyy&lt;/code&gt;, then &lt;code&gt;mynt serve yyy&lt;/code&gt; again, until the website is ready. &lt;/p&gt;
&lt;h2&gt;Publishing website&lt;/h2&gt;
&lt;p&gt;Upload all of the files in the &lt;code&gt;output/target&lt;/code&gt; directory to the hosting space. If you want to upload to a github-pages, then prepare the gh-pages as the &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt; shows, then push the files to the master/gh-pages branch. There is some notes in &lt;a href="/2015/10/31/sync_ghpages/"&gt;Pushing items to gh-pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tadaa...&lt;/p&gt;</content><category term="webpage"></category></entry><entry><title>Article published</title><link href="https://wcchin.github.io/article-published.html" rel="alternate"></link><published>2015-10-06T00:00:00+08:00</published><updated>2015-10-06T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2015-10-06:/article-published.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;Hooray~ This is an exciting news. &lt;/p&gt;
&lt;p&gt;My first article (me as the first author) has been published yesterday. It is rewritten from my master thesis. 
The idea came to my mind in the begining of the year 2012. Most of the development of the algorithms were done within the semester …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;Hooray~ This is an exciting news. &lt;/p&gt;
&lt;p&gt;My first article (me as the first author) has been published yesterday. It is rewritten from my master thesis. 
The idea came to my mind in the begining of the year 2012. Most of the development of the algorithms were done within the semester. 
Then I tried to test the algorithm in more ways, and finally all tryings were not end well. 
In april 2013, the algorithms were first proposed in an international conference in L.A.. Then I graduated in the following June/July. 
After that, the formal research on these algorithms were stop, and some other things keep comming up. 
Some further experiments were done. The codes were rewritten in matlab, then in python. I also made a GUI for the algorithms in Python. 
Although most of the testings did not give good results that worth noting, but, the understanding on the algorithms has became more clear. &lt;/p&gt;
&lt;p&gt;The article was submitted to the PLoSONE in the may 2015. After several times of revising, it was accepted in september after I came back from the FOSS4G conference at Seoul.  &lt;/p&gt;
&lt;p&gt;The article is about developing two algorithms for analyzing geospatial network, to see where people or moving agents would be gathering in the connected geographical space. 
The algorithms were modified from the PageRank algorithm, in the similar way as the Weighted PageRank did. Two key elements were added, the geographical distance between nodes, and the attractiveness of each node. &lt;/p&gt;
&lt;p&gt;Two "experiments" were conducted. One of them is a national-scale, inter-cities network. And the other is a series of city-scale, within-city networks. &lt;/p&gt;
&lt;p&gt;The abstract of the article is shown at &lt;a href="https://wcchin.github.io/findings/plosone_1010/"&gt;Mini-lab/Findings&lt;/a&gt;. 
The article could be accessed from the &lt;a href="http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0139509" target="_blank"&gt;Link to open access&lt;/a&gt;. &lt;/p&gt;</content><category term="publication"></category><category term="article"></category></entry><entry><title>Using plotly</title><link href="https://wcchin.github.io/using-plotly.html" rel="alternate"></link><published>2015-09-07T00:00:00+08:00</published><updated>2015-09-07T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2015-09-07:/using-plotly.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;I made a &lt;a href="https://wcchin.github.io/geograph/dengue_spacetimemap/" target="_blank"&gt;3D scatter plot&lt;/a&gt; with &lt;a href="https://plot.ly" target="_blank"&gt;plotly&lt;/a&gt; yesterday, in ipython notebook (Jupyter).
The data was stored in github, including the processed point data (with centroid coordinate), and the boundary vertex of Taiwan.&lt;/p&gt;
&lt;p&gt;The plot figures is at &lt;a href="https://wcchin.github.io/geograph/dengue_spacetimemap/"&gt;Dengue cases at Taiwan from year 2014 &lt;/a&gt; 
or in &lt;a href="https://plot.ly/~wcchin/67/indigenous-case-imported-case-taiwan-boundary/" target="_blank"&gt;plotly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;I made a &lt;a href="https://wcchin.github.io/geograph/dengue_spacetimemap/" target="_blank"&gt;3D scatter plot&lt;/a&gt; with &lt;a href="https://plot.ly" target="_blank"&gt;plotly&lt;/a&gt; yesterday, in ipython notebook (Jupyter).
The data was stored in github, including the processed point data (with centroid coordinate), and the boundary vertex of Taiwan.&lt;/p&gt;
&lt;p&gt;The plot figures is at &lt;a href="https://wcchin.github.io/geograph/dengue_spacetimemap/"&gt;Dengue cases at Taiwan from year 2014 &lt;/a&gt; 
or in &lt;a href="https://plot.ly/~wcchin/67/indigenous-case-imported-case-taiwan-boundary/" target="_blank"&gt;plotly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code is as the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly.plotly&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plotly.graph_objs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://raw.githubusercontent.com/wcchin/gdata/master/Dengue_ALL_4_1415.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_bound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://raw.githubusercontent.com/wcchin/gdata/master/taiwan_bound_84_vertices2.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;zz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;vilname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;importcheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;importcase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;datelist_imp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;latlist_imp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;lonlist_imp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;vilname_imp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;datelist_ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;latlist_ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;lonlist_ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;vilname_ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;thisyear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;thismonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;thisday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;thisdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thisyear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thismonth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thisday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;thisvilname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vilname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;big5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#print importcheck[i]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;importcheck&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;datelist_imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thisdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;latlist_imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;lonlist_imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;vilname_imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thisvilname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;datelist_ind&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thisdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;latlist_ind&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;lonlist_ind&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;vilname_ind&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thisvilname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#print len(datelist_ind)&lt;/span&gt;
&lt;span class="c1"&gt;#print len(datelist_imp)&lt;/span&gt;

&lt;span class="n"&gt;bound_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bound&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bound_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bound&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;bound_z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bound_x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;trace1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Scatter3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lonlist_ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;latlist_ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datelist_ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vilname_ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;indigenous case&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rgb(0, 0, 0)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;trace2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Scatter3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lonlist_imp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;latlist_imp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datelist_imp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vilname_imp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imported case&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rgb(255, 65, 54)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rgb(255, 65, 54)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tracebound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Scatter3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bound_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bound_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bound_z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lines&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;taiwan boundary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#1f77b4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rgb(0,0,0)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#1f77b4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;trace1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tracebound&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Margin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;traceorder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reversed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;yref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;paper&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;XAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;YAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;zaxis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ZAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Taiwan dengue cases (indigenous or imported) space-time map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ps: the python environment has to complete the connection api key configuration before using the code above. &lt;/p&gt;</content><category term="ipython"></category><category term="plotly"></category></entry><entry><title>Using nbconvert to convert ipynb to slides in html</title><link href="https://wcchin.github.io/using-nbconvert-to-convert-ipynb-to-slides-in-html.html" rel="alternate"></link><published>2015-08-27T00:00:00+08:00</published><updated>2015-08-27T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2015-08-27:/using-nbconvert-to-convert-ipynb-to-slides-in-html.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;This is a note on using nbconvert to make slides from ipynb to html, with markdown and codes using jupyter.
jupyter, nbconvert have to be installed in the computer.&lt;/p&gt;
&lt;h2&gt;Prepare the file&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;open a jupyter from terminal:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv shell miniconda-3.9.1
$ ipython notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;create a file (.ipynb), maybe a …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;This is a note on using nbconvert to make slides from ipynb to html, with markdown and codes using jupyter.
jupyter, nbconvert have to be installed in the computer.&lt;/p&gt;
&lt;h2&gt;Prepare the file&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;open a jupyter from terminal:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv shell miniconda-3.9.1
$ ipython notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;create a file (.ipynb), maybe a python2 file or R or something else which code you are going to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the text page, change the &lt;code&gt;Code&lt;/code&gt; to &lt;code&gt;Markdown&lt;/code&gt;, choose &lt;code&gt;Slideshow&lt;/code&gt; in Cell Toolbar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select one of the item in the Slide Type in the heading of each cell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type in markdown syntax, use tex syntax to type equation (MathJax is supported).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click save, or wait until autosave.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Convert to slides:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In terminal, change directory to where the .ipynb is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type this in terminal, suppose the .ipynb file's name is &lt;code&gt;filename&lt;/code&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jupyter nbconvert --to slides filename.ipynb --reveal-prefix &lt;span class="s2"&gt;&amp;quot;http://cdn.jsdelivr.net/reveal.js/2.5.0&amp;quot;&lt;/span&gt;
$ &lt;span class="c1"&gt;## or&lt;/span&gt;
$ jupyter nbconvert --to slides filename.ipynb --reveal-prefix &lt;span class="s2"&gt;&amp;quot;http://cdn.jsdelivr.net/reveal.js/2.5.0&amp;quot;&lt;/span&gt; --post serve
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;a file name &lt;code&gt;filename.slides.html&lt;/code&gt; will be created, open it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to change the theme from default to other provided theme, in address bar, add &lt;code&gt;?theme=sky&lt;/code&gt; after the &lt;code&gt;filename.slides.html&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other theme options: simple (default), sky, beige, solarized, serif, night, moon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to change the default transition to other provided way, same as changing the theme, add &lt;code&gt;?transition=convex&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other transition options: none, fade, slide, convex, concave, zoom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if the themes still not meet your ideal slides, add a file in the same directory name &lt;code&gt;custom.css&lt;/code&gt;, use this to alter the looks of the page, font style etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Taada&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;iframe width="800" height="600" src="/assets/ipyslides/testing_slides.slides.html?theme=sky?transition=convex" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="ipython"></category></entry><entry><title>Adding math formula</title><link href="https://wcchin.github.io/adding-math-formula.html" rel="alternate"></link><published>2015-08-21T00:00:00+08:00</published><updated>2015-08-21T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2015-08-21:/adding-math-formula.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;Testing &lt;a href="https://www.mathjax.org" target="_blank"&gt;MathJax&lt;/a&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$ GPR_{t}A = W_{AB} \times \frac{GPR_{t-1}B}{out_B} $$&lt;/div&gt;
&lt;p&gt;The "installing" steps is simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;include the CDN in &lt;head&gt; ... &lt;/head&gt;, in the case of mynt's quick start template, this could be added in the page.header.html file.&lt;/li&gt;
&lt;li&gt;type the formula in tex's syntax, using the double $ as …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;Testing &lt;a href="https://www.mathjax.org" target="_blank"&gt;MathJax&lt;/a&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$ GPR_{t}A = W_{AB} \times \frac{GPR_{t-1}B}{out_B} $$&lt;/div&gt;
&lt;p&gt;The "installing" steps is simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;include the CDN in &lt;head&gt; ... &lt;/head&gt;, in the case of mynt's quick start template, this could be added in the page.header.html file.&lt;/li&gt;
&lt;li&gt;type the formula in tex's syntax, using the double $ as the entering and exiting characters, so that the formula is between double $ pair. &lt;/li&gt;
&lt;li&gt;note that in default setting, the inline math mode is not supported, namely the single $ pair. To use this, some code is needed to be added to overwrite this setting. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;note: I tried to install the mathjax js in asset, and it is simple and worked. But, the generating time becomes longer, like a few seconds, maybe is because of the files that come with the js are quite large. So, I changed back to use the officially provided CDN. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="webpage"></category></entry><entry><title>Adding commenting system</title><link href="https://wcchin.github.io/adding-commenting-system.html" rel="alternate"></link><published>2015-08-20T00:00:00+08:00</published><updated>2015-08-20T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2015-08-20:/adding-commenting-system.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;In order to get feedbacks from friends, I added the Disqus commenting system in this site.&lt;/p&gt;
&lt;p&gt;Adding a Disqus comment system in a static website is not difficult:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sign-up on &lt;a href="https://disqus.com" target="_blank"&gt;Disqus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Go to Settings, Admin.&lt;/li&gt;
&lt;li&gt;Add new site and setup.&lt;/li&gt;
&lt;li&gt;Go to Install, Universal Code, and copy the codes to …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;In order to get feedbacks from friends, I added the Disqus commenting system in this site.&lt;/p&gt;
&lt;p&gt;Adding a Disqus comment system in a static website is not difficult:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sign-up on &lt;a href="https://disqus.com" target="_blank"&gt;Disqus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Go to Settings, Admin.&lt;/li&gt;
&lt;li&gt;Add new site and setup.&lt;/li&gt;
&lt;li&gt;Go to Install, Universal Code, and copy the codes to the template/layout html file.&lt;/li&gt;
&lt;li&gt;Regenerate the website, and push to the hosting server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thats all.&lt;/p&gt;</content><category term="webpage"></category></entry><entry><title>First post of the mini-lab</title><link href="https://wcchin.github.io/first-post-of-the-mini-lab.html" rel="alternate"></link><published>2015-08-03T00:00:00+08:00</published><updated>2015-08-03T00:00:00+08:00</updated><author><name>Benny Chin</name></author><id>tag:wcchin.github.io,2015-08-03:/first-post-of-the-mini-lab.html</id><summary type="html">&lt;hr&gt;
&lt;h5&gt;Welcome to &lt;a href="https://wcchin.github.io" target="_blank"&gt;Benny.mini-lab&lt;/a&gt;.&lt;/h5&gt;
&lt;p&gt;This is a place for storing what has come to my mind, and what I've done&lt;/p&gt;
&lt;p&gt;I created this website using the &lt;a href="http://mynt.uhnomoli.com" target="_blank"&gt;mynt&lt;/a&gt;, a static site generator using python and jinja.&lt;/p&gt;
&lt;p&gt;The style of the website is inspired by the &lt;a href="http://leafletjs.com" target="_blank"&gt;leafletjs&lt;/a&gt; and &lt;a href="http://getskeleton.com" target="_blank"&gt;skeleton&lt;/a&gt; website. These websites …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h5&gt;Welcome to &lt;a href="https://wcchin.github.io" target="_blank"&gt;Benny.mini-lab&lt;/a&gt;.&lt;/h5&gt;
&lt;p&gt;This is a place for storing what has come to my mind, and what I've done&lt;/p&gt;
&lt;p&gt;I created this website using the &lt;a href="http://mynt.uhnomoli.com" target="_blank"&gt;mynt&lt;/a&gt;, a static site generator using python and jinja.&lt;/p&gt;
&lt;p&gt;The style of the website is inspired by the &lt;a href="http://leafletjs.com" target="_blank"&gt;leafletjs&lt;/a&gt; and &lt;a href="http://getskeleton.com" target="_blank"&gt;skeleton&lt;/a&gt; website. These websites showed the beauty and power of simplicity. 
This website's template was modified from the mynt's &lt;em&gt;init&lt;/em&gt; site with the skeleton css.&lt;/p&gt;
&lt;p&gt;Currently, the &lt;a href="/pages/about-the-mini-lab-and-i.html"&gt;about&lt;/a&gt; page was done. Two published paper that I have a little contribution were added in the &lt;a href="/category/publication.html"&gt;Publications&lt;/a&gt; page.
The other pages will be fill-in while I am working.&lt;/p&gt;
&lt;p&gt;Thanks for visiting.&lt;/p&gt;</content><category term="webpage"></category></entry></feed>